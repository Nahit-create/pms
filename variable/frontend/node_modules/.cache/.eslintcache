[{"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\index.js":"1","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\App.js":"3","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Home.js":"4","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Signup.js":"5","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\reducer\\UseReduser.js":"6","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\MainNavbar.js":"7","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\DisplayProjects.js":"8","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Messages.js":"9","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Todos.js":"10","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\MyNotes.js":"11","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\SearchMembers.js":"12","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Profile.js":"13","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Eventscalendar.js":"14","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Notifications.js":"15","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\ViewProject.js":"16","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\UpdateProject.js":"17","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Projects.js":"18","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\DeleteProject.js":"19","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\ProjectNotification.js":"20","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\ProjectChat.js":"21","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\AssignPhases.js":"22","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\DeleteMember.js":"23","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\UpdateNotes.js":"24","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\CreateNotes.js":"25","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\TodoForm.js":"26","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\DeleteNote.js":"27"},{"size":316,"mtime":1684477902671,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":1681718140287,"results":"30","hashOfConfig":"31"},{"size":862,"mtime":1681718140217,"results":"32","hashOfConfig":"31"},{"size":930,"mtime":1681718140656,"results":"33","hashOfConfig":"31"},{"size":13539,"mtime":1684488642298,"results":"34","hashOfConfig":"29"},{"size":284,"mtime":1682532030500,"results":"35","hashOfConfig":"31"},{"size":1751,"mtime":1682674147572,"results":"36","hashOfConfig":"31"},{"size":8899,"mtime":1683733394995,"results":"37","hashOfConfig":"29"},{"size":15876,"mtime":1681718140730,"results":"38","hashOfConfig":"31"},{"size":3404,"mtime":1681718141023,"results":"39","hashOfConfig":"31"},{"size":3889,"mtime":1681718140759,"results":"40","hashOfConfig":"31"},{"size":8189,"mtime":1681832988228,"results":"41","hashOfConfig":"31"},{"size":2723,"mtime":1681718140813,"results":"42","hashOfConfig":"31"},{"size":2734,"mtime":1681718140618,"results":"43","hashOfConfig":"31"},{"size":7163,"mtime":1681718140786,"results":"44","hashOfConfig":"31"},{"size":11872,"mtime":1681718141103,"results":"45","hashOfConfig":"31"},{"size":28836,"mtime":1682533129792,"results":"46","hashOfConfig":"31"},{"size":25437,"mtime":1681718140891,"results":"47","hashOfConfig":"31"},{"size":4865,"mtime":1681718140526,"results":"48","hashOfConfig":"31"},{"size":5865,"mtime":1681718140863,"results":"49","hashOfConfig":"31"},{"size":3324,"mtime":1681718140838,"results":"50","hashOfConfig":"31"},{"size":17592,"mtime":1683737574556,"results":"51","hashOfConfig":"29"},{"size":1449,"mtime":1681718140431,"results":"52","hashOfConfig":"31"},{"size":4476,"mtime":1681718141049,"results":"53","hashOfConfig":"31"},{"size":4051,"mtime":1681718140399,"results":"54","hashOfConfig":"31"},{"size":15596,"mtime":1681718140998,"results":"55","hashOfConfig":"31"},{"size":2855,"mtime":1681718140484,"results":"56","hashOfConfig":"31"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n3wdsz",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xuhk6r",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":2,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\index.js",[],[],"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\App.js",["157","158"],[],"import React, { createContext, useReducer, useState, useEffect } from \"react\";\nimport { BrowserRouter, Routes ,Route } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from \"./components/Home\"\n\nimport {initialState, reducer} from \"../src/reducer/UseReduser\"\nimport Signup from \"./components/Signup\";\n\n\nexport const UserContext = createContext();\n\nfunction App() {\n\n    const [state, dispatch] = useReducer(reducer, initialState); \n    \n\n    return (\n       \n        <BrowserRouter>\n            <UserContext.Provider value={{state, dispatch}}>  \n                <Routes>\n                    <Route exact path=\"/\" element={<Home />}/>\n                    <Route exact path=\"/login\" element={<Signup />}/>\n                </Routes>\n            </UserContext.Provider>\n        </BrowserRouter>\n       \n    );\n}\n\nexport default App;\n","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Home.js",["159","160","161","162","163","164","165","166","167","168","169"],[],"import React, {useState, useEffect, useContext} from 'react'\nimport { useNavigate, NavLink } from 'react-router-dom'\nimport '../stylesheets/home.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col,Container, Fade, Button, ListGroup, Badge } from 'react-bootstrap';\nimport { UserContext } from '../App';\nimport MainNavbar from './MainNavbar';\nimport Signup from './Signup';\n\n\nconst Home = () => {\n\n    const {state, dispatch} = useContext(UserContext);   \n    // const [selectedProject, setSelectedProject] = useState();\n    \n  return (\n    <>\n        {state\n        ?\n        <Container  className='background ' fluid>\n          <MainNavbar />\n        </Container>\n        :\n        <Container className='background2 ' fluid>\n          <Signup/>\n          {/* <h1>For creating / managing teams please<NavLink to=\"/login\" >Login</NavLink></h1> */}\n        </Container>\n        }\n    </>\n  )\n}\n\nexport default Home","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Signup.js",["170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186"],[],"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\reducer\\UseReduser.js",[],[],"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\MainNavbar.js",["187","188","189","190","191","192","193","194","195","196","197","198","199","200","201"],[],"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\DisplayProjects.js",["202","203","204","205","206","207","208","209","210","211","212","213"],[],"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Messages.js",["214","215","216","217","218","219","220","221","222","223","224"],[],"import React, {useState, useEffect, useContext} from 'react'\nimport { useNavigate, NavLink } from 'react-router-dom'\nimport '../stylesheets/messages.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col,Container, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport image_S1 from '../images/abstract10.png'\nimport image_S2 from '../images/abstract1.png'\nimport { UserContext } from '../App'\nimport io from \"socket.io-client\";\nimport DeleteMember from './DeleteMember';\n\nconst ENDPOINT = \"http://localhost:5000\"\nvar socket, currentChat;\n\nconst Messages = () => {\n\n    const {state, dispatch} = useContext(UserContext);\n    const [smShow, setSmShow] = useState(false);\n    const [smShowGroup, setSmShowGroup] = useState(false);\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n    const handleShow = () => {setFullscreen(true); setShow(true);}\n    const [lgShow, setLgShow] = useState(false);\n    const [lgShowGroup, setLgGroupShow] = useState(false);\n    const [groupChats, setGroupChats] = useState([]);\n    const [allfriends, setAllfriends] = useState([]);\n    const [selectedId, setSelectedId] = useState(\"\");\n    const [txtInput, setTxtInput] = useState(\"\");\n    const [allMessages, setAllMessages] = useState([]);\n    const [userConnection, setUserConnection] = useState(false);\n    const [selectedChatId, setSelectedChatId] = useState(\"\");\n    const [senderchatId, setSenderChatId] = useState(\"\");\n    const [notification, setNotification] = useState([]);\n    const userProfile = JSON.parse(localStorage.getItem(\"User\")); \n\n    const handleHideSelectionModal = () =>{\n        setSmShow(false);\n    }\n\n    const handleHideSelectionModalGroup = () =>{\n        setSmShowGroup(false);\n    }\n\n\n    const getAllChats = async () =>{\n        try {\n            const response = await fetch('/allGroupChats', {\n                method: 'GET',\n            })\n\n            const data = await response.json();\n            console.log(data)\n            setGroupChats(data);\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n    \n    \n\n    const getFriends = async () =>{\n        try {\n            const response = await fetch('/getFriends', {\n                method: 'GET',\n            })\n\n            const data = await response.json();\n            console.log(data)\n            setAllfriends(data);\n            // console.log(senderProfiles)\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    useEffect(() => {\n        getFriends();\n        getAllChats();\n        socket = io(ENDPOINT);\n        socket.emit(\"setUser\", userProfile);\n        socket.on(\"User Connected\", () => setUserConnection(true));\n    },[])\n\n\n    const handleRefreshCompnent = () =>{\n        getFriends();\n        getAllChats();\n    }\n\n\n\n    const handleGroupClick = async (e) =>{\n        // console.log(e.target.id)\n        setSelectedId(e.target.id)\n        let selectedId = e.target.id;\n        // console.log(e.target.id)\n        setSmShowGroup(true);\n\n        try { \n            const response = await fetch('/getAllGroupMsgs', {  \n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                },\n                body: JSON.stringify({selectedId}),\n            });\n\n            const data = await response.json();\n            let getMessages = data.getAllMessages;\n            let getChat = data.chatExist;\n            setSelectedChatId(getChat._id);\n            setAllMessages(getMessages);\n\n            socket.emit(\"joinSelectedChat\", getChat._id);\n\n\n        } catch (error) {\n            console.log(error)\n        }  \n        \n    }\n\n\n\n    const handleClick = async (e) =>{\n        // console.log(e.target.id)\n        setSelectedId(e.target.id)\n        let selectedId = e.target.id;\n        // console.log(e.target.id)\n        setSmShow(true);\n\n        try {\n            const response = await fetch('/getAllMsgs', {  \n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                },\n                body: JSON.stringify({selectedId}),\n            });\n\n            const data = await response.json();\n            let getMessages = data.getAllMessages;\n            let getChat = data.chatExist;\n            setSelectedChatId(getChat._id);\n            setAllMessages(getMessages);\n\n            socket.emit(\"joinSelectedChat\", getChat._id);\n\n\n        } catch (error) {\n            console.log(error)\n        }  \n        \n    }\n\n\n\n    // const handelChange = (e) =>{setTxtInput(e.target.value)}\n\n    const handleKeyDown = async (e) =>{\n        if(e.keyCode === 13 && selectedId){\n            try {\n                const response = await fetch('/sendingMsg', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({selectedId, txtInput}),\n                    // body: searchInput\n                })\n                \n                let data = await response.json();\n               \n                setSenderChatId(data.newMessage.ChatId)\n                socket.emit(\"sendingMessage\", data)\n    \n            } catch (error) {\n                console.log(error)\n            }\n        }\n        \n    }\n\n    const handleSendBtn = async () =>{\n\n        try {\n            const response = await fetch('/sendingMsg', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                },\n                body: JSON.stringify({selectedId, txtInput}),\n                // body: searchInput\n            })\n            \n            let data = await response.json();\n           \n            setSenderChatId(data.newMessage.ChatId)\n            socket.emit(\"sendingMessage\", data)\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    const handleKeyDownGroup = async (e) =>{\n        if(e.keyCode === 13 && selectedId){\n            try {\n                const response = await fetch('/sendingGroupMsg', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({selectedId, txtInput}),\n                    // body: searchInput\n                })\n                \n                let data = await response.json();\n               \n                setSenderChatId(data.newMessage.ChatId)\n                socket.emit(\"sendingMessage\", data)\n    \n            } catch (error) {\n                console.log(error)\n            }\n        }\n        \n    }\n\n    const handleSendGroupBtn = async () =>{\n        try {\n            const response = await fetch('/sendingGroupMsg', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                },\n                body: JSON.stringify({selectedId, txtInput}),\n                // body: searchInput\n            })\n            \n            let data = await response.json();\n           \n            setSenderChatId(data.newMessage.ChatId)\n            socket.emit(\"sendingMessage\", data)\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n \n\n\n    useEffect(() => {\n        currentChat = selectedChatId\n\n    }, [selectedChatId])\n\n    useEffect(() => {\n        socket.on(\"messageRecieved\", (newMessage) =>{\n            console.log(newMessage)    \n            if(!currentChat || currentChat !== newMessage.ChatId){\n                console.log(newMessage)\n                setNotification(notification => [newMessage, ...notification]);\n                socket.off(\"messageRecieved\");\n                console.log(notification)\n            } \n            else{  \n            setAllMessages(allMessages => [...allMessages, newMessage]);\n            socket.off(\"messageRecieved\");\n            }\n        });\n        console.log(allMessages)\n        \n    },[])\n\n\n\n  return (\n    <>\n          \n        <ListGroup.Item className='navList' onClick={handleShow}>\n            <i className='far fa-comments'>&nbsp;</i>         \n            {' '}\n            Chat Box \n        </ListGroup.Item>\n       \n     \n        <Modal show={show} fullscreen={fullscreen} onHide={() => setShow(false)}>\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title>Chat Box</Modal.Title>\n                <Button className='refreshBtn' onClick={handleRefreshCompnent}><i className=\"material-icons refreshIcon\">refresh</i></Button>\n            </Modal.Header>\n        <Modal.Body className='modalBody'>\n            <Container>\n                <Row className=\"justify-content-md-center\">\n                    {allfriends.map( (allfriends, index) =>\n                        <Col sm lg=\"3\" key={index}>\n                            <ListGroup.Item as=\"li\"  id={allfriends._id} onClick={handleClick} className=\"profileMessages\">\n                                <img \n                                    src={allfriends.image}\n                                    id={allfriends._id}\n                                    onClick={handleClick}\n                                    onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\n                                    className=\"profileImages\"\n                                />\n                                <br></br>\n                                <b>{allfriends.name}</b>\n                            </ListGroup.Item>\n                            <br></br>\n                        </Col>\n                    )}\n                    {groupChats.map( (element, index) =>\n                        <Col sm lg=\"3\" key={index}>\n                            <ListGroup.Item as=\"li\"  id={element._id} onClick={handleGroupClick} className=\"profileMessages\">\n                                <img \n                                    src={image_S2}\n                                    id={element._id}\n                                    onClick={handleGroupClick}\n                                    onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\n                                    className=\"profileImages\"\n                                />\n                                <br></br>\n                                <b>{element.groupName}</b>\n                            </ListGroup.Item>\n                            <br></br>\n                        </Col>\n                    )}\n                </Row>  \n            </Container>     \n        </Modal.Body>\n      </Modal>\n\n\n\n\n      <Modal size=\"sm\" show={smShow} onHide={handleHideSelectionModal} aria-labelledby=\"example-modal-sizes-title-sm\" >\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\" className='titleSelection'>\n                    Choose For Selected Member\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n\n                <ListGroup.Item className='selectedListItem' onClick={() => setLgShow(true)}>\n                    <i className='far fa-comments'></i>         \n                    <br></br>\n                    Start Chat\n                </ListGroup.Item>\n\n                <br></br>\n\n                <DeleteMember/>\n\n            </Modal.Body>\n        </Modal>\n\n\n\n      <Modal size=\"lg\" show={lgShow} onHide={() => setLgShow(false)} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-lg\">\n        <Modal.Header closeButton className='modalHeader'>\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\n            Chat\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='modalBodyMsg'>\n            {selectedId ?\n                <Container>  \n                    <ListGroup>                 \n                    {allMessages.map( (allMessages, index) =>                              \n                        <ListGroup.Item className={allMessages.sender === state.id ? \"myMsgs\" : \"otherMsgs\"} key={index}>\n                            <p className='msgtxt'> {allMessages.message}</p> \n                        </ListGroup.Item>                        \n                    )}\n                    </ListGroup>\n                </Container>\n            :\n                <Container></Container>\n            }\n        </Modal.Body>\n        <Modal.Footer className='modalFooter'>\n            {selectedId ?\n                <Container>        \n                    <InputGroup className=\"mb-3\">\n                        <Form.Control placeholder=\"Message\" className='formInput' value={txtInput} onChange={(e) => setTxtInput(e.target.value)} onKeyDown={handleKeyDown} />\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleSendBtn}>\n                            <i className=\"fa fa-paper-plane\"></i>\n                        </Button>\n                    </InputGroup>\n                </Container>\n            :\n                <Container></Container>\n            }\n        </Modal.Footer>\n      </Modal>\n\n\n\n\n\n\n\n\n      <Modal size=\"sm\" show={smShowGroup} onHide={handleHideSelectionModalGroup} aria-labelledby=\"example-modal-sizes-title-sm\" >\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\" className='titleSelection'>\n                    Choose For Selected Group\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n\n                <ListGroup.Item className='selectedListItem' onClick={() => setLgGroupShow(true)}>\n                    <i className='far fa-comments'></i>         \n                    <br></br>\n                    Start Chat\n                </ListGroup.Item>\n\n                <br></br>\n\n                <DeleteMember/>\n\n            </Modal.Body>\n        </Modal>\n\n            {/* group chat */}\n\n      <Modal size=\"lg\" show={lgShowGroup} onHide={() => setLgGroupShow(false)} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-lg\">\n        <Modal.Header closeButton className='modalHeader'>\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\n            Chat\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='modalBodyMsg'>\n            {selectedId ?\n                <Container>  \n                    <ListGroup>                 \n                    {allMessages.map( (allMessages, index) =>                              \n                        <ListGroup.Item className={allMessages.sender === state.id ? \"myMsgs\" : \"otherMsgs\"} key={index}>\n                            <p className='msgtxt'> {allMessages.message}</p> \n                        </ListGroup.Item>                        \n                    )}\n                    </ListGroup>\n                </Container>\n            :\n                <Container></Container>\n            }\n        </Modal.Body>\n        <Modal.Footer className='modalFooter'>\n            {selectedId ?\n                <Container>        \n                    <InputGroup className=\"mb-3\">\n                        <Form.Control placeholder=\"Message\" className='formInput' value={txtInput} onChange={(e) => setTxtInput(e.target.value)} onKeyDown={handleKeyDownGroup} />\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleSendGroupBtn}>\n                            <i className=\"fa fa-paper-plane\"></i>\n                        </Button>\n                    </InputGroup>\n                </Container>\n            :\n                <Container></Container>\n            }\n        </Modal.Footer>\n      </Modal>\n    \n\n    </>\n  )\n}\n\nexport default Messages","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Todos.js",["225","226","227","228","229","230","231"],[],"import React, { useState, useEffect, useContext, useRef } from 'react';\nimport { useNavigate, NavLink } from 'react-router-dom'\nimport { Row, Col,Container, Fade, Button, ListGroup, Badge } from 'react-bootstrap';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport '../stylesheets/todos.css'\nimport TodoForm from './TodoForm';\nimport { UserContext } from '../App'\n\nconst SideNavbar = () => {\n\n    const {state, dispatch} = useContext(UserContext);  \n    const [fecthTasks, setFecthTasks] = useState();\n    const [tasks, setTasks] = useState([]);\n    const [taskUpdate, setTaskUpdate] = useState();\n    const [show, setShow] = useState(false);\n    const handleClose = () => {\n      setShow(false);\n      setTaskUpdate(null);\n    }\n    const handleShow = () => setShow(true);\n    \n\n\n    \n    const showTasks = async () =>{\n        try {\n          const response = await fetch('/showTasks', { \n            method: 'GET', \n        });\n  \n        const data = await response.json();\n        console.log(data) \n        setTasks(data);\n        } catch (error) {\n          console.log(error)\n        }\n      \n    }\n\n  useEffect(() =>{\n      showTasks();\n  },[fecthTasks])\n\n\n  const handleClick = (e) =>{\n    \n    const taskId = e.target.id;\n\n    const findTask = tasks.find(clickedTask => clickedTask._id === taskId);\n\n    let oldDate = new Date(findTask.date)\n    let day = oldDate.getDate();\n    let month = oldDate.getMonth() + 1;\n    let year = oldDate.getFullYear();\n        \n    if (month < 10) month = \"0\" + month;\n    if (day < 10) day = \"0\" + day;\n\n    let fullDate = year+\"-\"+month+\"-\"+day;\n\n    findTask.date = fullDate;\n\n    setTaskUpdate(findTask)\n      // taskUpdate = findTask;\n    // taskUpdate.current = findTask;\n    // navigate(\"/updateForm\", {state : {findTask}})\n    \n  }\n\n    return ( \n        <>\n        <ListGroup.Item className='navList' onClick={handleShow}>\n          <i className='fas fa-tasks'>&nbsp;</i>         \n          {' '}\n          To-Do List\n        </ListGroup.Item> \n\n      <Offcanvas show={show} onHide={handleClose} >\n        <Offcanvas.Header closeButton className='todoOffCanvas'>\n          <Offcanvas.Title>To-Do-List</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body className='todoOffCanvas'>\n        <TodoForm clickedTask={{taskUpdate, setFecthTasks}}/>\n          <Container className='todosContainer'>\n              <Row>\n                <Col>\n                  <ListGroup as=\"ol\" variant=\"flush\" numbered className='todosList'>\n                    {tasks.map( (tasks, index) =>\n                      <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start todosList\">\n                      <div id='category' className=\"ms-2 me-auto\">\n                        <div id={tasks._id} onClick={handleClick} className=\"fw-bold\">{tasks.task}</div>\n                        {tasks.category}\n                      </div>\n                      <Badge id='date' bg=\"primary\" pill className='badgeList'>\n                        {'Due Date: '}{ new Date(tasks.date).toLocaleDateString()}\n                      </Badge>\n                    </ListGroup.Item>\n                    )}\n                  </ListGroup>\n                </Col>\n              </Row>\n            </Container>\n            \n            \n            \n        </Offcanvas.Body>\n      </Offcanvas>\n\n    </>\n  )\n}\n\nexport default SideNavbar\n\n\n\n","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\MyNotes.js",["232","233","234","235","236","237","238","239","240","241","242","243"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\nimport '../stylesheets/displayProjects.css'\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport CreateNotes from './CreateNotes';\nimport UpdateNotes from './UpdateNotes';\nimport DeleteNote from './DeleteNote';\n\n\nconst MyNotes = () => {\n\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n    const handleShow = () => {setFullscreen(true); setShow(true);}\n    const handleHideModal = () =>{setShow(false);}\n    const [smShow, setSmShow] = useState(false);\n    const [myNotes, setMyNotes] = useState([]);\n    const [currentNote, setCurrentNote] = useState();\n    const handleHideSelectionModal = () =>{setCurrentNote(\"\"); setSmShow(false);}\n    const [fecthTasks, setFecthTasks] = useState();\n\n\n\n    const getNotes = async () =>{\n      try {\n          const response = await fetch('/getallNotes', {\n              method: 'GET',\n          })\n\n          const data = await response.json();\n          console.log(data)\n          setMyNotes(data);\n\n      } catch (error) {\n          console.log(error)\n      }\n\n  }\n\n  useEffect(() => {\n    getNotes();\n  },[fecthTasks])\n\n\n  const clickedNote = (e) =>{\n      let noteId = e.target.id;\n      let getnote = myNotes.find(element => element._id === noteId);\n      setCurrentNote(getnote);\n      setSmShow(true);\n  }\n\n\n  return (\n    <>\n        <ListGroup.Item className='navList' onClick={handleShow}>\n          <i className='fa fa-sticky-note'>&nbsp;</i>         \n          {' '}\n          My Notes\n        </ListGroup.Item>\n\n        <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal}>\n            <Modal.Header closeButton className='modalHeader'>\n              <Container>\n                <Row className=\"justify-content-md-center\">\n                  <Col sm lg=\"5\">\n                    <Modal.Title>My Notes</Modal.Title>\n                    <br></br>\n                  </Col>\n                  <Col sm lg=\"6\">\n                    <Container ><CreateNotes props={{setFecthTasks}}/></Container>\n                    <br></br>\n                  </Col>\n                </Row>\n              </Container>  \n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n              \n              <br></br>\n              <Container>\n                <Row className=\"justify-content-md-center\">\n                  {myNotes.map((element, index)=>\n                    <Col sm lg=\"4\" key={index}>\n                      <ListGroup.Item className='notesCont' id={element._id} onClick={clickedNote}>\n                        <h5>Title: {element.noteTitle}</h5>\n                        <br></br>\n                        <p><b>Note:</b> {element.noteText}</p>\n                        <br></br>\n                        <p>Date: {element.noteDate.substring(0,10)}</p>\n                      </ListGroup.Item>\n                      <br></br>\n                    </Col>\n                  )}\n                </Row>\n              </Container>\n            </Modal.Body>\n        </Modal>\n\n\n\n\n        <Modal size=\"sm\" show={smShow} onHide={handleHideSelectionModal} aria-labelledby=\"example-modal-sizes-title-sm\" >\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\" className='titleSelection'>\n                    Choose For Selected Note\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n              <UpdateNotes noteData={{currentNote, setFecthTasks}}/>              \n              <br></br>\n              <DeleteNote noteData={{currentNote, setFecthTasks}}/>\n              <br></br>\n            </Modal.Body>\n        </Modal>\n    </>\n  )\n}\n\nexport default MyNotes","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\SearchMembers.js",["244","245","246"],[],"import React, {useState, useEffect, useContext} from 'react'\nimport '../stylesheets/searchMembers.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col, InputGroup, Button, Modal, FormControl, ListGroup} from 'react-bootstrap';\nimport image_S1 from '../images/abstract10.png'\nimport { UserContext } from '../App'\n\nconst SearchMembers = ({props}) => {\n    const {state} = useContext(UserContext);  \n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n    const [show, setShow] = useState(false);\n    const [searchInput, setSearchInput] = useState('');\n    const [searchResult, setSearchResult] = useState([]);\n    const [allfriends, setAllfriends] = useState([]);\n\n    \n    \n    const getFriends = async () =>{\n        try {\n            const response = await fetch('/getFriends', {\n                method: 'GET',\n            })\n\n            const data = await response.json();\n            console.log(data)\n            setAllfriends(data);\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    useEffect(() => {\n        getFriends();\n    },[])\n\n\n    const handelChange = (e) =>{\n        setSearchInput(e.target.value)\n        // console.log(e.target.value)\n    }\n\n    const handleKeyDown = async (e) =>{\n        \n\n        if(e.keyCode === 13 && searchInput){\n\n            try {\n                const response = await fetch('/searchBar', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({searchInput}),\n                })\n                \n                let data = await response.json();\n                if(response.status === 201 && data.length > 0){\n                    setSearchResult(data);\n                } \n                else{\n                    setAlertTitle(\"Alert\");\n                    setAlertMessage(\"No matches found.\");\n                    setShowAlert(true);\n                }             \n                \n            } catch (error) {\n                console.log(error);\n            }\n            \n        }\n\n    }\n\n    const handleSearchBtn = async () =>{\n        \n        try {\n            const response = await fetch('/searchBar', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                },\n                body: JSON.stringify({searchInput}),\n            })\n            \n            let data = await response.json();\n            if(response.status === 201 && data.length > 0){\n                setSearchResult(data);\n            } \n            else{\n                setAlertTitle(\"Alert\");\n                setAlertMessage(\"No matches found.\");\n                setShowAlert(true);\n            } \n        } catch (error) {\n            console.log(error);\n        }\n        \n    }\n\n\n    const compareIds = () =>{\n        let selfBtn = document.getElementById(state.id)\n        \n        if(selfBtn){\n            selfBtn.textContent = 'Own Profile';\n            selfBtn.disabled = true;\n        }\n\n        allfriends.map((element)=>{\n            let friendBtn = document.getElementById(element._id)\n            if(friendBtn){\n                friendBtn.textContent = 'Member Exist';\n                friendBtn.disabled = true;\n            }\n        })\n    }\n\n    useEffect(()=>{\n        compareIds();\n    },[searchResult])\n   \n\n    const handleRequestBtn = async (e) =>{\n        let personId = e.target.id;        \n       \n        try {\n            const response = await fetch('/sendingRequest', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                }, \n                body: JSON.stringify({personId}),\n                // body: searchInput\n            })\n            \n    \n            let data = await response.json();\n    \n            if(response.status === 201 && data){\n                setAlertTitle(\"Alert\");\n                setAlertMessage(data.message);\n                setShowAlert(true); \n                props.setFetchData(data);\n                setShow(false);\n                setSearchInput(\"\");\n                setSearchResult([]);\n            }\n            else{\n                setAlertTitle(\"Alert\");\n                setAlertMessage(data.message);\n                setShowAlert(true); \n            }\n            \n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n\n\n    const handleCoseModal = () =>{\n        setShow(false);\n        setSearchInput(\"\");\n        setSearchResult([]);\n    }\n \n  return (\n    <>\n\n        <ListGroup.Item className='newProjectBtn' onClick={() => setShow(true)}>    \n            <i className='fa fa-search'></i>\n            {' '}\n            Find Members      \n        </ListGroup.Item>\n\n        <Modal show={show} onHide={handleCoseModal}>\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title>Find Members</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n                <Row>    \n                    <Col>\n                        <InputGroup className=\"mb-3\">\n                        <FormControl\n                            placeholder=\"Find Members\"\n                            type=\"text\"\n                            aria-label=\"Recipient's username\"\n                            aria-describedby=\"basic-addon2\"\n                            value={searchInput}\n                            className='formInput'\n                            onChange={handelChange}\n                            onKeyDown={handleKeyDown}\n                        />\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleSearchBtn}>\n                            <i className=\"fa fa-search searchIcon\"></i>\n                        </Button>\n                        </InputGroup>\n                    </Col>\n                </Row>\n\n                <Row>\n                <Col>\n                  <ListGroup as=\"ol\" variant=\"flush\" >\n                    {searchResult.map( (searchResult, index) =>\n                      <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start memberLists\">\n                        <Row>\n                            <Col>\n                                <img src={searchResult.image}\n                                    onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\n                                    className=\"profileImages\"\n                                />\n                                <h5>{searchResult.name}</h5>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Button id={searchResult._id} className='sendRequestBtn'  bg=\"primary\" onClick={handleRequestBtn}>\n                                    Send Request\n                                </Button>\n                            </Col>\n                        </Row>\n                    </ListGroup.Item>\n                    )}\n                  </ListGroup>\n                </Col>\n              </Row>\n            </Modal.Body>\n        </Modal>\n            \n\n\n\n\n            {/* Alert Modal */}\n\n            <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n            </Modal>\n        \n           \n        \n    </>\n  )\n}\n\nexport default SearchMembers","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Profile.js",["247","248","249","250","251","252","253","254","255","256","257","258","259"],[],"import React, {useState, useContext, useEffect} from 'react'\nimport {useNavigate} from \"react-router-dom\";\nimport '../stylesheets/profile.css'\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport image_S1 from '../images/abstract10.png'\nimport { UserContext } from '../App'\n\nconst Profile = () => {\n\n    const {state, dispatch} = useContext(UserContext); \n    const [showAlert, setShowAlert] = useState(false);\n    const navigate = useNavigate();\n\n    const handleSignOut = async () =>{\n\n        try{\n            const response = await fetch(\"/userSignOut\", {\n                method: \"GET\",\n            });\n            let data = await response.json();\n\n            if(response.status === 201 && data){\n                localStorage.removeItem(\"User\")      \n                navigate(\"/login\");\n            }\n        } catch(error){\n            console.log(error)\n        }\n\n    }\n\n  return (\n    <>\n        <ListGroup.Item className='navList' onClick={()=>setShowAlert(true)}>\n            <i className='fa fa-user-circle'>&nbsp;</i>         \n            {' '}\n            Profile\n        </ListGroup.Item>\n\n        <Modal size=\"sm\" show={showAlert} onHide={()=>setShowAlert(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">Profile</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                {state ?\n                    <Container className='profileCont'>\n                        <Row className=\"justify-content-md-center\">\n                            <Col>\n                                <img \n                                    src={state.image}\n                                    onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\n                                    className=\"profileImages\"\n                                />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <p>{state.name}</p>\n                        </Row>\n                        <Row>\n                            <p>{state.email}</p>\n                        </Row>\n                    </Container>\n                :\n                    <Container></Container>\n                }                \n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleSignOut}>SignOut</Button> \n            </Modal.Footer>\n        </Modal>\n    \n    </>\n  )\n}\n\nexport default Profile","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Eventscalendar.js",["260","261","262","263","264","265","266","267","268","269","270","271","272"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\nimport '../stylesheets/eventsCalendar.css'\nimport { Row, Col,Container, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid';\n\n\n\nconst Eventscalendar = () => {\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n    const handleShow = () => {setFullscreen(true); setShow(true);}\n    const [tasks, setTasks] = useState([]);\n    const [projects, setProjects] = useState([]);\n    const [allEvents, setAllEvents] = useState([]);\n    \n\n    const showTasks = async () =>{\n        try {\n          const response = await fetch('/showTasks', {\n            method: 'GET',\n        });\n  \n        const data = await response.json();\n        // console.log(data)\n        setTasks(data);\n\n        } catch (error) {\n          console.log(error)\n        }\n      \n  }\n\n\n  const showProjects = async () =>{\n    try {\n      const response = await fetch('/getProjects', {\n        method: 'GET',\n    });\n\n    const data = await response.json();\n\n    setProjects(data)\n\n    } catch (error) {\n      console.log(error)\n    }\n  \n}\n\n  useEffect(() =>{\n      showTasks();\n      showProjects();\n  },[])\n\n\n  const createEvents = () =>{\n    let events = [];\n\n    for(let items of tasks){\n        events.push({\n            title: items.task,\n            date: items.date.substring(0,10)\n        })\n  \n    }\n\n    for(let items of projects){\n        events.push({\n            title: items.projectTitle,\n            date: items.dueDate.substring(0,10)\n        })\n    }\n\n    console.log(events)\n    setAllEvents(events)\n\n  }\n\n\n  useEffect(() =>{\n    createEvents();\n},[tasks, projects])\n\n  return (\n    <>\n      <ListGroup.Item className='navList' onClick={handleShow}>\n        <i className='fa fa-calendar'>&nbsp;</i>         \n        {' '}\n        Calendar View\n      </ListGroup.Item>\n      <Modal show={show} fullscreen={fullscreen} onHide={() => setShow(false)}>\n        <Modal.Header closeButton className='modalHeader'>\n          <Modal.Title>Due Projects & Tasks</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='modalBody'>\n\n        <FullCalendar\n        plugins={[ dayGridPlugin, timeGridPlugin ]}\n        initialView=\"dayGridMonth\"\n        // events={[\n        //     { title: 'event 1', date: '2022-10-13' },\n        //     { title: 'event 2', date: '2022-10-13' }\n        //   ]}\n        events={allEvents}\n        />\n        \n        </Modal.Body>\n      </Modal>\n    \n    </>\n  )\n}\n\nexport default Eventscalendar","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Notifications.js",["273","274","275","276","277","278","279","280"],[],"import React, {useState, useEffect, useContext} from 'react'\nimport { NavLink, useNavigate } from 'react-router-dom'\nimport '../stylesheets/notifications.css'\nimport { Row, Col, Container, InputGroup, Button, Modal, FormControl, ListGroup, Badge } from 'react-bootstrap';\nimport SearchMembers from './SearchMembers';\nimport image_S1 from '../images/abstract10.png'\n\nconst Notifications = () => { \n\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n    const handleShow = () => {setFullscreen(true); setShow(true);}\n    const [senderProfiles, setSenderProfiles] = useState([]);\n    const [receiverProfiles, setReceiverProfiles] = useState([]);\n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n    const [fetchData, setFetchData] = useState();\n\n\n    const requestSentBYMe = async () =>{\n      try {\n          const response = await fetch('/requestSentBYMe', { \n              method: 'GET',\n          })\n\n          const data = await response.json();\n          console.log(data)\n          setReceiverProfiles(data);\n\n      } catch (error) {\n          console.log(error)\n      }\n  }\n\n\n\n    const getRequest = async () =>{\n        try {\n            const response = await fetch('/getRequest', { \n                method: 'GET',\n            })\n\n            const data = await response.json();\n            console.log(data)\n            setSenderProfiles(data);\n            // console.log(senderProfiles)\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getRequest();\n        requestSentBYMe();\n    },[fetchData])\n\n\n    const handleAcceptBtn = async (e) =>{\n        let personId = e.target.id;\n        try {\n          const response = await fetch('/acceptRequest', {\n            method: 'POST',\n            headers: {\n                'Content-Type' : 'application/json' \n            },\n            body: JSON.stringify({personId}),\n            // body: searchInput\n        })\n\n        let data = await response.json();\n\n        if(response.status === 201 && data){\n          setAlertTitle(\"Alert\");\n          setAlertMessage(data.message);\n          setShowAlert(true);\n          setFetchData(data)\n        }\n          \n      } catch (error) {\n        console.log(error)    \n      }\n        \n    }\n\n\n\n    const handleCancelRequest = async (e) =>{\n      let personId = e.target.id;\n      try {\n        const response = await fetch('/cancelRequest', {\n          method: 'POST',\n          headers: {\n              'Content-Type' : 'application/json' \n          },\n          body: JSON.stringify({personId}),\n          // body: searchInput\n      })\n\n      let data = await response.json();\n\n      if(response.status === 201 && data){\n        setAlertTitle(\"Alert\");\n        setAlertMessage(data.message);\n        setShowAlert(true);\n        setFetchData(data)\n      }\n        \n    } catch (error) {\n      console.log(error)    \n    }\n\n    }\n\n    const handleRefreshCompnent = () =>{\n      getRequest();\n    }\n\n\n  return (\n    <>\n      <ListGroup.Item className='navList' onClick={handleShow}>\n        <i className='fa fa-search'>&nbsp;</i>         \n        {' '}\n        Members\n      </ListGroup.Item>\n\n      <Modal show={show} fullscreen={fullscreen} onHide={()=>setShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\n        <Modal.Header closeButton className='modalHeader'>\n          <Container>\n            <Row className=\"justify-content-md-center\">\n              <Col sm lg=\"5\">\n                <Modal.Title>Notifications</Modal.Title>\n                <br></br>\n              </Col>\n              <Col sm lg=\"6\">\n                <Container><SearchMembers props={{setFetchData}}/></Container>  \n                <br></br>\n              </Col>\n              <Col sm lg=\"1\">\n                <Button className='refreshBtn2' onClick={handleRefreshCompnent}><i className=\"material-icons refreshIcon\">refresh</i></Button>\n              </Col>\n            </Row>\n          </Container>    \n        </Modal.Header>\n        <Modal.Body className='modalBody'>\n          <Container>\n              <Row>\n                <Container>\n                  <Row className=\"justify-content-md-center\">\n                      {senderProfiles.map( (senderProfiles, index) =>\n                        <Col sm lg=\"4\" key={index}>\n                          <ListGroup.Item as=\"li\" key={index}  className=\"profileMessages\">\n                            <img \n                              src={senderProfiles.image}\n                              onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\n                              className=\"profileImages\"\n                            />\n                            <br></br>\n                            <b>{senderProfiles.name}</b>\n                            <br></br>\n                            <br></br>\n                            <Button id={senderProfiles._id} bg=\"primary\" className=\"sendRequestBtn\" onClick={handleAcceptBtn}>\n                              Accept Request\n                            </Button>\n                          </ListGroup.Item>\n                        </Col>\n                      )}\n                      {receiverProfiles.map( (receiverProfiles, index) =>\n                        <Col sm lg=\"4\" key={index}>\n                          <ListGroup.Item as=\"li\" key={index}  className=\"profileMessages\">\n                            <img \n                              src={receiverProfiles.image}\n                              onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\n                              className=\"profileImages\"\n                            />\n                            <br></br>\n                            <b>{receiverProfiles.name}</b>\n                            <br></br>\n                            <br></br>\n                            <Button id={receiverProfiles._id} bg=\"primary\" className=\"sendRequestBtn\" onClick={handleCancelRequest}>\n                              Cancel Request\n                            </Button>\n                          </ListGroup.Item>\n                        </Col>\n                      )}\n                  </Row>\n                </Container>\n              </Row>\n          </Container>\n        </Modal.Body>\n      </Modal>\n\n\n\n\n      {/* Alert Modal */}\n\n      <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n            </Modal>\n    \n    </>\n  )\n}\n\nexport default Notifications","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\ViewProject.js",["281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296"],[],"import React, {useState, useContext, useEffect} from 'react'\nimport '../stylesheets/displayProjects.css'\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport { UserContext } from '../App'\n\nconst ViewProject = ({projectData}) => {\n   \n    const {state, dispatch} = useContext(UserContext);  \n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const [smShow, setSmShow] = useState(false);\n    const [currentProjectMembers, setCurrentProjectMembers] = useState([]);\n    const [assignedPhases, setAssignedPhases] = useState([]);\n    const [currentProjectCreator, setCurrentProjectCreator] = useState();\n    const [myAssignedPhases, setmyAssignedPhases] = useState([]);\n    const [selectedPhase, setSelectedPhase] = useState();\n  \n\n\n\n    const showPhases = async () =>{\n        if(projectData){\n            try {\n                let selectedProjectId = projectData._id;\n                let selectedProjectCreator = projectData.projectCreator;\n\n                const response = await fetch('/showProjectPhases', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({selectedProjectId, selectedProjectCreator}),\n                })\n    \n                const data = await response.json();\n                console.log(data)\n                if(data){\n                    if(data.findProjectPhases){\n                        setAssignedPhases(data.findProjectPhases.allPhases);\n                    }\n                    else{\n                        setAssignedPhases([]);\n                    }\n                    setCurrentProjectCreator(data.findProjectCreator);\n                    setCurrentProjectMembers(data.selectedProjectMembers)\n                }\n               \n\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }\n\n\n    useEffect(() =>{\n        showPhases();\n    },[])\n\n    const handelAssigning = () =>{\n        if(assignedPhases){\n            let phaseObj = [];\n            assignedPhases.map((element)=>{\n                if(element.memberRef === state.id){\n                    phaseObj.push(element);\n                }\n            })\n       \n            setmyAssignedPhases(phaseObj); \n\n            console.log(myAssignedPhases)\n        }\n    }\n\n\n\n    useEffect(() =>{\n        handelAssigning();\n    },[assignedPhases])\n\n\n    const phaseCompletionModal = (e) =>{\n        let id = e.target.id;\n        let findPhase = myAssignedPhases.find(element => element.phaseId === id);\n        console.log(findPhase)\n        setSelectedPhase(findPhase);\n        setSmShow(true);\n    }\n\n    const handleCompletedPhases = async (e) =>{\n        let selectedProjectId = e.target.id;\n        try {\n            const response = await fetch('/phaseCompletedNotification', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                },\n                body: JSON.stringify({selectedProjectId, selectedPhase}),\n            })\n\n            const data = await response.json();\n\n            if(response.status === 201 && data){\n                setAlertTitle(\"Alert\")\n                setAlertMessage(data.message);\n                setShowAlert(true);\n            }\n            \n        } catch (error) {\n            console.log(error);\n        }\n        setSmShow(false);\n    }\n\n\n    const handleDownloadFile = async (e) =>{\n        let fileId = e.target.id;\n        console.log(fileId)\n        let x = document.getElementById(\"2abc\")\n        try {\n            const response = await fetch(`/downloadFile/${fileId}`);\n\n            const file = await response.blob();\n            const url = window.URL.createObjectURL(file);\n\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = fileId;\n            // document.body.appendChild(a);\n            x.appendChild(a);\n            a.click();\n            // window.URL.revokeObjectURL(url);\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n  \n    return (\n    <>\n    \n        <ListGroup.Item className='selectedListItem' onClick={handleShow}>\n            <i className='fa fa-tv chat-icon'></i>         \n            <br></br>\n            View Project\n        </ListGroup.Item>\n        <Modal show={show} onHide={handleClose} backdrop=\"static\" keyboard={false} >\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title>Selected Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n                {projectData ?\n                    <Container>\n                        <ListGroup>\n                            <h6><b>Details: </b> </h6>\n                            {currentProjectCreator ?\n                                <ListGroup.Item className='phaseListItem'><b>Project Creator: {currentProjectCreator.projectCreatorName}</b></ListGroup.Item>\n                            :\n                                <ListGroup.Item className='phaseListItem'><b>Project Creator: </b></ListGroup.Item>\n                            }\n                            \n                            <ListGroup.Item className='phaseListItem'><b>Title: </b> {projectData.projectTitle} </ListGroup.Item>\n                            <ListGroup.Item className='phaseListItem'><b>Discription: </b> {projectData.projectDiscription}</ListGroup.Item>\n                            <ListGroup.Item className='phaseListItem'><b>Start Date: </b> {projectData.startDate.substring(0,10)}</ListGroup.Item>\n                            <ListGroup.Item className='phaseListItem'><b>Due Date: </b> {projectData.dueDate.substring(0,10)}</ListGroup.Item>\n                            <ListGroup.Item className='phaseListItem'><b>Type: </b> {projectData.projectType}</ListGroup.Item>\n                            <br></br>\n                            <h6><b>Members: </b> </h6>\n                            {currentProjectMembers.map((element, index)=>\n                                <ListGroup.Item key={index} className='phaseListItem'>\n                                    {element.memberName}\n                                </ListGroup.Item>\n                            )}\n                            <br></br>\n                            <h6><b>Phases: </b> </h6>\n                            {projectData.projectPhases.map((element, index)=>\n                                <ListGroup.Item key={index} className='phaseListItem'>\n                                    Phase {element.PhaseNum} --- {element.PhaseTitle}\n                                </ListGroup.Item>\n                            )}\n                            <br></br> \n                            <h6><b>Files: </b> </h6>\n                            {projectData.projectFiles.map((element, index)=>\n                                <ListGroup.Item key={index} id={index + \"abc\"} className='phaseListItem'>\n                                    File Name: {element.fileName}\n                                    <br></br>\n                                    File Size: {Math.floor(element.fileSize/10000) + 'KB'}\n                                    <Button className='downloadBtn' id={element._id} onClick={handleDownloadFile}><i className=\"fa fa-download\" id={element._id} onClick={handleDownloadFile}></i></Button>\n                                </ListGroup.Item>\n                            )}\n                            <br></br>\n                            <h6><b>My Assigned Phases & Tasks: </b> </h6>\n                            {myAssignedPhases ?\n                                <>\n                                {myAssignedPhases.map((element, index)=>\n                                    <ListGroup.Item key={index} className='phaseListItem'>\n                                        Phase Number: {element.phaseNum} <i id={element.phaseId} className=\"fa fa-check-circle completedBtn\" onClick={phaseCompletionModal}></i>\n                                        <br></br>\n                                        Phase Title: {element.phaseTitle}\n                                    </ListGroup.Item>\n                                )}\n                                </>\n                            :\n                                <ListGroup.Item className='phaseListItem'>No Assigned Phases</ListGroup.Item>\n                            }\n                            \n                    </ListGroup>\n                    </Container>\n                :\n                    <ListGroup>\n                        <ListGroup.Item className='phaseListItem'><b>Creator: </b> </ListGroup.Item>\n                        <ListGroup.Item className='phaseListItem'><b>Title: </b> </ListGroup.Item>\n                        <ListGroup.Item className='phaseListItem'><b>Discription: </b> </ListGroup.Item>\n                        <ListGroup.Item className='phaseListItem'><b>Start Date: </b> </ListGroup.Item>\n                        <ListGroup.Item className='phaseListItem'><b>Due Date: </b> </ListGroup.Item>\n                        <ListGroup.Item className='phaseListItem'><b>Type: </b> </ListGroup.Item>\n                        <ListGroup.Item className='phaseListItem'><b>Members: </b> </ListGroup.Item>\n                        <ListGroup.Item className='phaseListItem'><b>Phases: </b> </ListGroup.Item>\n                        <ListGroup.Item className='phaseListItem'><b>Files: </b> </ListGroup.Item>\n                    </ListGroup>\n                }\n                \n            </Modal.Body>\n        </Modal>\n\n\n                {/* Phase Completion Modal  */}\n\n\n        <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                {selectedPhase ?\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">{selectedPhase.phaseTitle}</Modal.Title>\n                  :\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">Selected Phase</Modal.Title>\n                }  \n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>If you completed the selected phase / task then click \n                    on <b>Task Completed</b> button to send notification to the project creator.</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                {projectData ?\n                    <Button className='saveBtn' id={projectData._id} onClick={handleCompletedPhases}>Task Completed</Button>\n                    :\n                    <Button className='saveBtn'>Save</Button>\n                }\n            </Modal.Footer>\n        </Modal>\n\n\n\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n            </Modal>\n    </>\n  )\n}\n\nexport default ViewProject","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\UpdateProject.js",["297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313"],[],"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\Projects.js",["314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330"],[],"import React, {useState, useEffect} from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport \"../stylesheets/projects.css\"\nimport {Container, Form, Button, Row, Col, Badge, FloatingLabel, Popover, Dropdown, ButtonGroup, DropdownButton, OverlayTrigger, FormControl, Modal, ListGroup, InputGroup } from 'react-bootstrap';\nimport image_S1 from '../images/abstract10.png'\n\n\nconst Projects = ({props}) => {\n\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n    const handleShow = () => {setFullscreen(true); setShow(true);}\n    const [smShow, setSmShow] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n    const [desigModal, setDesigModal] = useState(false);\n    const [phaseModal, setPhaseModal] = useState(false);\n    const [phaseUpdateModal, setPhaseUpdateModal] = useState(false);\n    const [txtInput, setTxtInput] = useState(\"\");\n    const [projectPhases, setProjectPhases] = useState([]);\n    const [allfriends, setAllfriends] = useState([]);\n    const [friends, setFriends] = useState([]);\n    const [members, setMembers] = useState([]);\n    const [membersIds, setMembersIds] = useState([]);\n    const [designationInput, setDesignationInput] = useState();\n    const [phaseInput, setPhaseInput] = useState(\"\");\n    const [phaseEditInput, setPhaseEditInput] = useState(\"\");\n    const [desigId, setDesigId] = useState(\"\");\n    const [projectSelected, setProjectSelected] = useState();\n    const [projectFiles, setProjectFiles] = useState([]);\n    const [projectDetails, setProjectDetails] = useState({\n        projectTitle : \"\",\n        projectDiscription : \"\",\n        startDate : \"\",\n        dueDate : \"\",\n        projectType : \"\",\n    });\n\n    let name, value;\n\n    const handleInputs = (e) =>{ \n        name = e.target.name;\n        value = e.target.value;\n        \n        setProjectDetails({...projectDetails, [name]:value});\n    }\n    \n    \n    const handleFiles = (e) =>{\n        let myfiles = e.target.files \n        console.log(myfiles)\n        setProjectFiles(myfiles);\n        \n    }\n\n    const handleSubmit = async (e) =>{\n        e.preventDefault();\n        const form = e.currentTarget;\n       \n        console.log(membersIds)\n        let addDesig = []\n\n        membersIds.map((membersIds)=>{\n            let singleId = document.getElementById(membersIds)\n            addDesig.push({id: membersIds, desg: singleId.value})\n        })\n        \n        let formData = new FormData();\n        formData.append('projectTitle', projectDetails.projectTitle)\n        formData.append('projectDiscription', projectDetails.projectDiscription)\n        formData.append('startDate', projectDetails.startDate)\n        formData.append('dueDate', projectDetails.dueDate)\n        formData.append('projectType', projectDetails.projectType)\n        formData.append('projectMembers', JSON.stringify(members))\n        formData.append('projectDesig', JSON.stringify(addDesig))\n        formData.append('projectPhases', JSON.stringify(projectPhases))\n        \n        for(let i=0; i < projectFiles.length; i++){\n            formData.append('projectFiles', projectFiles[i])\n        }\n          \n        console.log(projectFiles)\n        if(projectPhases.length > 0 && projectDetails.projectTitle && projectDetails.startDate &&  projectDetails.dueDate && projectDetails.projectDiscription && projectDetails.projectType){\n            try {\n                const response = await fetch(\"/createNewProject\", {\n                    method: \"POST\",\n                    body: formData\n                      \n                });\n\n                const data = await response.json();\n\n                if(response.status === 201 && data){\n                    setProjectDetails({\n                        projectTitle : \"\",\n                        projectDiscription : \"\",\n                        startDate : \"\",\n                        dueDate : \"\",\n                        projectType : \"\",\n                    })\n                    setProjectPhases([]);\n                    setMembers([]);\n                    form.reset();\n\n                    setAlertTitle(\"Alert\");\n                    setAlertMessage(\"Project created.\");\n                    setShowAlert(true);\n                    props.setFecthTasks(data);\n                    setShow(false);\n                }\n                \n            } catch (error) {\n                console.log(error);\n            }\n            \n        }\n        else{\n            setAlertTitle(\"Alert\")\n            setAlertMessage(\"Please fill all the fields.\");\n            setShowAlert(true);\n        } \n\n    }\n\n\n    const getFriends = async () =>{\n        try {\n            const response = await fetch('/getFriends', {\n                method: 'GET',\n            })\n\n            const data = await response.json();\n            console.log(data)\n            setAllfriends(data);\n            setFriends(data);\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    useEffect(() => {\n        getFriends();\n    },[])\n\n\n\n    const handelDesigInput = (e) =>{\n        let input = e.target.value\n\n        setDesignationInput(input)\n\n        console.log(designationInput)\n    }\n\n\n\n    const showSearchResult = () =>{\n\n        if(txtInput === \"\"){\n            \n            setAllfriends(friends) \n        }\n        else{\n            let newList = allfriends.filter((element) =>{\n                return element.name.toLowerCase().includes(txtInput.toLowerCase())\n            })\n\n            setAllfriends(newList) \n        }\n\n    }\n\n\n    useEffect(()=>{\n        showSearchResult();\n    },[txtInput])\n\n    const handelChange = (e) =>{\n        setTxtInput(e.target.value)\n        showSearchResult();\n    }\n\n\n    \n\n    const addMember = (e) =>{\n        let id = e.target.id;\n\n        if(projectSelected){\n            let getProfile = members.find(element => element._id === id);\n            if(getProfile){\n                projectSelected.members.map((element)=>{\n                    if(element.memberRef === id){\n                        window.alert(\"Exisiting Member\")\n                    }\n                })\n            }\n            else{\n                let getProfile = allfriends.find(element => element._id === id);\n        \n            setMembersIds(membersIds => [...membersIds, getProfile._id])\n    \n            setMembers(members => [...members, getProfile])\n    \n    \n            const newList = allfriends.filter(friendId => {\n                return friendId._id !== id;\n            })\n            \n            setAllfriends(newList) \n            }\n           \n           \n        }\n        else{\n            let getProfile = allfriends.find(element => element._id === id);\n        \n            setMembersIds(membersIds => [...membersIds, getProfile._id])\n    \n            setMembers(members => [...members, getProfile])\n    \n    \n            const newList = allfriends.filter(friendId => {\n                return friendId._id !== id;\n            })\n            \n            setAllfriends(newList)  \n        }\n\n             \n        \n    }\n\n    const removeMember = (e) =>{\n        let id = e.target.id;\n\n        let getProfile = members.find(element => element._id === id);\n        let getfriends = allfriends.find(element => element._id === id);\n\n        if(!getfriends){\n            console.log(\"done\")\n            setAllfriends(allfriends => [...allfriends, getProfile])\n        }\n        \n\n        const newList = members.filter(friendId => {\n            return friendId._id !== id;\n        })\n\n        const newIds = membersIds.filter(ids => {\n            return ids !== id\n        })\n        setMembersIds(newIds)\n        setMembers(newList)\n\n    }\n\n    const handleHideModal = () =>{\n        setShow(false);\n        setProjectSelected(null);\n    }\n\n\n\n    const changeDesig = (e) =>{\n        setDesigId(e.target.id )\n        setDesigModal(true)\n    }\n\n    const handleDeisgBtn = () =>{\n        console.log(designationInput)\n        let desigTag = document.getElementById(desigId)\n        desigTag.innerText = designationInput\n        setDesigModal(false)\n        // console.log(desigTag.innerText)\n    }\n\n\n\n    const handlePhasesInput = (e) =>{\n        const form = e.currentTarget;\n        e.preventDefault();\n       \n\n        console.log(phaseInput)\n        \n        if(projectPhases.length <= 9 && phaseInput){\n            let checkPhase = projectPhases.find(element1 => element1 === phaseInput);\n            if(checkPhase){\n                setAlertTitle(\"Alert\")\n                setAlertMessage(\"Phase title already exist, Choose a different title.\");\n                setShowAlert(true);\n            }\n            else{\n                if(phaseInput){\n                    setProjectPhases(projectPhases => [...projectPhases, phaseInput])\n                }\n                else{\n                    return;\n                }  \n            }\n        }\n        else{\n            setAlertTitle(\"Alert\")\n            setAlertMessage(\"Please add minimum 1 or maximum 10 phases per project.\");\n            setShowAlert(true);\n        }\n        \n        \n        setPhaseInput(\"\")\n        form.reset();\n    }\n\n    const removePhase = (e) =>{\n        let phaseName = e.target.id;\n        let removeSelectedPhase = projectPhases.filter(element1 => element1 !== phaseName);\n        setProjectPhases(removeSelectedPhase)\n    }\n\n\n    const editPhase = (e) =>{\n        let phaseName = e.target.id;\n        setPhaseEditInput(phaseName)\n        setPhaseUpdateModal(true)\n        console.log(phaseName)\n    }\n\n   const handlePhaseUpdate = (e) =>{\n        const form = e.currentTarget;\n        e.preventDefault();\n\n        const index = projectPhases.indexOf(phaseEditInput);\n        projectPhases[index] = phaseInput;\n\n        setPhaseInput(\"\")\n        form.reset();\n        setPhaseUpdateModal(false)\n   }\n\n\n\n\n  return (\n    <>\n        <ListGroup.Item className='newProjectBtn' onClick={handleShow}>\n            <i className='fa fa-plus'></i>\n            {' '}\n            Create Project         \n        </ListGroup.Item>\n     \n      <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal}>\n        <Modal.Header closeButton className='modalHeader'>\n            <Modal.Title>Create New Project</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='modalBody'>\n            <Form method='POST' onSubmit={handleSubmit} className='contactForm' name='projectForm' id='projectForm'>\n                <Container className='formCont'>\n                <Row>\n                    <Col>\n                    <Form.Group className=\"mb-3\" >\n                        <Form.Label >Title</Form.Label>\n                        <Form.Control type=\"text\" name='projectTitle' className='formInput' id='projectTitle' value={projectDetails.projectTitle} onChange={handleInputs} placeholder=\"Enter Project Title\" />\n                    </Form.Group>\n                    </Col>\n                    <Col>\n                    <Form.Group className=\"mb-3 inputGroup\" >\n                        <Form.Label >Type</Form.Label>\n                        <Form.Select name='projectType' id='projectType' onChange={handleInputs} value={projectDetails.projectType} className='formInput'>                \n                            <option className='listOption' value='N/A'>N/A</option>               \n                            <option className='listOption' value='Personal'>Personal</option>               \n                            <option className='listOption' value='Team'>Team</option>              \n                        </Form.Select>\n                    </Form.Group>\n  \n                </Col>\n                </Row>\n                <Row>\n                    <Col>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Discription</Form.Label>\n                        <Form.Control as=\"textarea\" rows={3} name='projectDiscription' className='formInput'id='projectDiscription' value={projectDetails.projectDiscription} onChange={handleInputs}/>\n                    </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                <Col>\n                <Form.Group className=\"mb-3 inputGroup\" >\n                    <Form.Label >Start Date</Form.Label>\n                    <Form.Control type=\"date\" name='startDate' id='startDate' className='formInput' value={projectDetails.startDate} onChange={handleInputs} placeholder=\"date\" />\n                </Form.Group>\n                </Col>\n                <Col>\n                <Form.Group className=\"mb-3 inputGroup\" >\n                    <Form.Label >Due Date</Form.Label>\n                    <Form.Control type=\"date\" name='dueDate' id='dueDate' className='formInput' value={projectDetails.dueDate} onChange={handleInputs} placeholder=\"date\" />\n                </Form.Group>\n                </Col>\n                \n                </Row>\n                <Row>\n                    <Col>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Add files</Form.Label>\n                        <Form.Control type=\"file\" multiple name='projectFiles' className='formInput' id='projectFiles' onChange={handleFiles}/>\n                    </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Label>Add Project Phases</Form.Label><Button className=\"addMembers\" onClick={()=>setPhaseModal(true)}><i className=\"fa fa-plus\"></i></Button>\n                        <ListGroup variant=\"flush\" className='teamlist'>\n\n                        {projectPhases.map((element, index)=>\n                            <ListGroup.Item as=\"li\" key={index} className='phaseListItem'>\n                                <Container>\n                                    <Row>\n                                        <Col sm lg={8}> Phase {index + 1} {element}  </Col>\n                                        <Col sm lg={2}>  <i className=\"fa fa-edit phaseEditBtn\" id={element} onClick={editPhase}></i>  <br></br> </Col>\n                                        <Col sm lg={2}> <i className=\"fa fa-trash phaseTrashBtn\" id={element} onClick={removePhase}></i>   </Col>\n                                    </Row>\n                                </Container>\n                            </ListGroup.Item>\n                        )}\n\n                        </ListGroup>                \n                    </Col>\n                </Row>\n                <br></br>\n                <Row>\n                    <Col>\n                    <Form.Label>Add Team Members </Form.Label><Button className=\"addMembers\" onClick={()=>setSmShow(true)}><i className=\"fa fa-plus\"></i></Button>\n                    <ListGroup variant=\"flush\" className='teamlist'>\n                        {members.map( (members, index) =>\n                            <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start phaseListItem\" >\n                                <Container>\n                                <Row className=\"justify-content-md-center\">\n                                    <Col lg=\"3\">\n                                        <img \n                                            src={members.image}\n                                            onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\n                                            className=\"profileImages imageFloat\"\n                                        />\n                                    </Col>\n                                    <Col lg=\"3\">\n                                        <p className='memberListName'>{members.name}</p>\n                                    </Col>\n                                    <Col lg=\"4\">\n                                        Designation:\n                                    <InputGroup className=\"mb-3 \">\n                                        <Form.Control\n                                            placeholder=\"Enter Designation\"\n                                            aria-label=\"Recipient's username\"\n                                            aria-describedby=\"basic-addon2\"\n                                            id={members._id}\n                                            className=\"formInput\"\n                                            onChange={handelDesigInput}\n                                        />\n                                    </InputGroup>\n                                    </Col>\n                                    <Col lg=\"2\">\n                                        <i className=\"fa fa-trash phaseTrashBtn\" id={members._id} onClick={removeMember}></i>\n                                    </Col>\n                                    \n                                </Row>\n                                </Container>\n                            </ListGroup.Item>\n                        )}\n                        </ListGroup>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <Row className=\"justify-content-md-center\">            \n                        <Col sm lg={5}>\n                            <Button className='projectSubmitBtn' variant=\"primary\" type=\"submit\">\n                                Create Project\n                            </Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </Form>\n            <br></br>\n            <br></br>\n        </Modal.Body>\n      </Modal>\n\n\n\n\n      <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\n                Add Members\n            </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n                <Container>\n                <Row >\n                    <Col>\n                        <InputGroup className=\"mb-3\">\n                        <Form.Control\n                            placeholder=\"Search Members\"\n                            aria-label=\"Recipient's username\"\n                            aria-describedby=\"basic-addon2\"\n                            value={txtInput}\n                            onChange={handelChange}\n                            className='formInput'\n                        />\n                    </InputGroup>\n\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ListGroup variant=\"flush\">\n                        {allfriends.map( (allfriends, index) =>\n                            <ListGroup.Item as=\"li\" key={index}  className=\"d-flex justify-content-between align-items-start membersList\" >\n                                <Row>\n                                    <Col>\n                                        <img src={allfriends.image}\n                                        onError={(e)=>{e.target.onError = null; e.target.src = image_S1}}\n                                        className=\"profileImages\"/>\n                                    </Col>\n                                    <Col>\n                                        <p>{allfriends.name}</p>\n                                    </Col>\n                                    <Col>\n                                    <i className=\"fa fa-plus addFriendIcon\" id={allfriends._id} onClick={addMember}></i>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        )}\n                        </ListGroup>\n                    </Col>\n                </Row>\n                </Container>\n            </Modal.Body>\n            </Modal>\n\n\n\n                            {/* Changing Designation */}\n\n            {/* <Modal\n                size=\"sm\"\n                show={desigModal}\n                onHide={() => setDesigModal(false)}\n                aria-labelledby=\"example-modal-sizes-title-sm\"\n            >\n            <Modal.Header closeButton>\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\n                Add Designation\n            </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Container>\n                <Row >\n                    <Col>\n\n                    <InputGroup className=\"mb-3\">\n                        <FormControl\n                            placeholder=\"Enter Designation\"\n                            aria-label=\"Recipient's username\"\n                            aria-describedby=\"basic-addon2\"\n                            // id={members._id}\n                            onChange={handelDesigInput}\n                        />\n                        <Button variant=\"outline-secondary\" className='searchBtn' id=\"button-addon2\" onClick={handleDeisgBtn}>\n                            <i className=\"fa fa-plus searchIcon\"></i>\n                        </Button>\n                        </InputGroup>\n                    </Col>\n                </Row>\n                </Container>\n            </Modal.Body>\n            </Modal> */}\n\n\n\n                        {/* Phase Modal */}\n\n            <Modal size=\"sm\" show={phaseModal} onHide={() => setPhaseModal(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\n                Project Phases\n            </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n                <Container>\n                    <p>You can only add 1 to 10 phases per project.</p>\n                    <Form noValidate onSubmit={handlePhasesInput}>\n                        <Form.Group  controlId=\"validationCustom01\">\n                            <Form.Label>Phase Title</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"Phase Title\"\n                                onChange={(e)=>setPhaseInput(e.target.value)} \n                                isValid={phaseInput}\n                                isInvalid={!phaseInput}\n                                className='formInput'\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Input\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <br></br>\n                        <Button type=\"submit\" className='phaseBtn'>\n                            <i className=\"fa fa-plus\"></i>\n                        </Button>\n                    </Form>\n                </Container>\n            </Modal.Body>\n            </Modal>\n\n\n\n                {/* Phase Edit Modal */}\n\n            <Modal  size=\"sm\" show={phaseUpdateModal} onHide={() => setPhaseUpdateModal(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\n                 <Modal.Header closeButton className='modalHeader'>\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">\n                        Edit Phases\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className='modalBody'>\n                <Container>\n                    <Form noValidate  onSubmit={handlePhaseUpdate}>\n                        <Form.Group  controlId=\"validationCustom01\">\n                            <Form.Label>Phase Title</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"Phase Title\"\n                                defaultValue={phaseEditInput}\n                                onChange={(e)=>setPhaseInput(e.target.value)} \n                                isValid={phaseInput}\n                                className='formInput'\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Input\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <br></br>\n                        <Button type=\"submit\" className='saveBtnPhase'>\n                            Save Changes\n                        </Button>\n                    </Form>\n                </Container>\n                </Modal.Body>\n            </Modal>\n            \n\n\n\n\n\n            {/* Alert Modal */}\n\n            <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n            </Modal>\n\n\n            \n                \n    </>\n  )\n}\n\nexport default Projects","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\DeleteProject.js",["331","332","333","334","335","336","337","338","339","340","341","342","343","344","345"],[],"import React, {useState, useEffect} from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport \"../stylesheets/projects.css\"\nimport {Container, Form, Button, Row, Col, Badge, FloatingLabel, Popover, Dropdown, ButtonGroup, DropdownButton, OverlayTrigger, FormControl, Modal, ListGroup, InputGroup } from 'react-bootstrap';\n// import DisplayProjects from './DisplayProjects';\n\nconst DeleteProject = ({projectData}) => {\n\n    const [showModal, setShowModal] = useState(false);\n    const handleClose = () => setShowModal(false);\n    const handleShow = () => setShowModal(true);\n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n\n    const handleDeleteProject = async (e) =>{\n        let selectedId = e.target.id;\n        \n        try {\n            const response = await fetch('/deleteProject', { \n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                },\n                body: JSON.stringify({selectedId}),\n            })\n\n            let data = await response.json();\n            if(response.status === 201 && data){\n                setShowModal(false);\n                setAlertTitle(\"Alert\");\n                setAlertMessage(data.message);\n                setShowAlert(true);\n                projectData.setFecthTasks(data);\n            }\n            console.log(data)\n            \n\n        } catch (error) {\n            console.log(error);\n        } \n        \n    }\n\n\n  return (\n    <>\n        <ListGroup.Item className='selectedListItem' onClick={handleShow}>\n            <i className='fa fa-trash chat-icon'></i>         \n            <br></br>\n            Delete Project\n        </ListGroup.Item>\n\n        <Modal show={showModal} onHide={handleClose} >\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title>Delete Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                {projectData ?\n                <>\n                <p className='warningTxt'>Selected project will be permanently deleted when click on <b>Delete Project</b> button.</p>\n                <ListGroup>\n                    <ListGroup.Item className='memberLists'><b>Title: </b> {projectData.currentProject.projectTitle} </ListGroup.Item>\n                    <ListGroup.Item className='memberLists'><b>Discription: </b> {projectData.currentProject.projectDiscription}</ListGroup.Item>\n                    <ListGroup.Item className='memberLists'><b>Type: </b> {projectData.currentProject.projectType}</ListGroup.Item>\n                </ListGroup>\n                </>\n                :\n                <>\n                <p className='warningTxt'>Selected project will be permanently deleted when click on <b>Delete Project</b> button.</p>\n                <ListGroup>\n                    <ListGroup.Item className='memberLists'><b>Title: </b> </ListGroup.Item>\n                    <ListGroup.Item className='memberLists'><b>Discription: </b> </ListGroup.Item>\n                    <ListGroup.Item className='memberLists'><b>Start Date: </b> </ListGroup.Item>\n                    <ListGroup.Item className='memberLists'><b>Due Date: </b> </ListGroup.Item>\n                    <ListGroup.Item className='memberLists'><b>Due Date: </b> </ListGroup.Item>\n                    <ListGroup.Item ><b>Type: </b> </ListGroup.Item>\n                </ListGroup>\n                </>\n                }\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                {projectData ?\n                    <Button variant=\"warning\" className='saveBtn' id={projectData.currentProject._id} onClick={handleDeleteProject}>Delete Project</Button>\n                :\n                    <Button variant=\"warning\" className='saveBtn' >Delete Project</Button>\n                }\n            </Modal.Footer>\n        </Modal>\n       \n        {/* <Container className='contHidden'><DisplayProjects keyNum={keyNum}/></Container> */}\n                \n\n\n                \n            {/* Alert Modal */}\n\n            <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose}  aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n            </Modal>\n    </>\n  )\n}\n\nexport default DeleteProject","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\ProjectNotification.js",["346","347","348","349","350","351","352","353","354","355","356","357"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\nimport '../stylesheets/displayProjects.css'\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport Toast from 'react-bootstrap/Toast';\n\nconst ProjectNotification = ({projectData}) => {\n\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n    const handleShow = () => {setFullscreen(true); setShow(true);}\n    const handleHideModal = () =>{setShow(false);}\n    const [smShow, setSmShow] = useState(false);\n    const [projectNotifications, setProjectNotifications] = useState([]);\n\n\n\n    const getNotifications = async () =>{\n        if(projectData){\n            let selectedProjectId = projectData._id;\n            try {\n                const response = await fetch('/getProjectNotifications', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({selectedProjectId}),\n                })\n    \n                const data = await response.json();\n                setProjectNotifications(data);\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }\n  \n\n    useEffect(()=>{\n        getNotifications();\n    },[])\n\n\n    const deleteAllNotifications = async () =>{\n        if(projectData){\n            let selectedProjectId = projectData._id;\n            try {\n                const response = await fetch('/deleteProjectNotifications', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({selectedProjectId}),\n                })\n    \n                const data = await response.json();\n\n                if(response.status === 201 && data){\n                    setSmShow(false);\n                    setShow(false);\n                }\n               \n            } catch (error) {\n                console.log(error)\n            }\n        }\n\n    }\n\n\n    return (\n        <>\n            <ListGroup.Item className='selectedListItem' onClick={handleShow}>\n                <i className='fa fa-bell chat-icon'></i>         \n                <br></br>\n                Project Notifications\n            </ListGroup.Item>\n            \n            <Modal show={show} fullscreen={fullscreen} onHide={handleHideModal} backdrop=\"static\" keyboard={false} >\n                <Modal.Header closeButton className='modalHeader'>\n                    {projectData ?\n                        <Modal.Title>{projectData.projectTitle}</Modal.Title>\n                    :\n                        <Modal.Title>Selected Project</Modal.Title>\n                    } \n                </Modal.Header>\n                <Modal.Body className='modalBodyStatic'>\n                {projectNotifications ?\n                    <Container>\n                        <Row className=\"justify-content-md-center\">\n                            {projectNotifications.map((element, index)=>\n                                <Col sm lg=\"4\" key={index}>\n                                    <Toast className='toastMain'>\n                                        <Toast.Header className='toastHeader' closeButton={false}>\n                                            <img src={element.memberImage} className=\"rounded me-2 notificationImage\" alt=\"\" />\n                                            <strong className=\"me-auto\">{element.memberName}</strong>\n                                            <small>{element.notificationDate.substring(0,10)}</small>\n                                        </Toast.Header>\n                                        <Toast.Body>\n                                            \"Phase Number {element.phaseNum} : {element.phaseTitle}\" has been completed.\n                                        </Toast.Body>\n                                    </Toast>\n                                </Col>\n                            )}\n                        </Row>\n                    </Container>\n                :\n                    <Container></Container>\n                }\n                </Modal.Body>\n                <Modal.Footer className='modalFooter'>\n                    <Button className='saveBtn' onClick={() => setSmShow(true)}>Delete All Notification</Button>\n                </Modal.Footer>\n            </Modal>\n\n\n\n\n            {/* Delete All Notifications Modal  */}\n\n\n        <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                {projectData ?\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">{projectData.projectTitle}</Modal.Title>\n                  :\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">Selected Project</Modal.Title>\n                }  \n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                {projectNotifications.length > 0 ?\n                    <p>Click on <b>Proceed</b> button will permanently delete all notifications for this project.</p>\n                :\n                    <p>No new notifications.</p>\n                }\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                {projectNotifications.length > 0 ?\n                    <Button className='saveBtn' onClick={deleteAllNotifications}>Proceed</Button>\n                :\n                    <Button className='saveBtn' onClick={() => setSmShow(false)}>Ok</Button>\n                }\n                \n            </Modal.Footer>\n        </Modal>\n    \n    </>\n  )\n}\n\nexport default ProjectNotification","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\ProjectChat.js",["358","359","360","361","362","363","364","365","366","367","368","369","370","371","372"],[],"import React, {useState, useContext, useEffect} from 'react'\nimport '../stylesheets/displayProjects.css'\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\n\n\nconst ProjectChat = ({projectData}) => {\n    const [show, setShow] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n\n    const handleCreateChat = async (e) =>{\n        let selectedProjectId = e.target.id;\n\n        try {\n            const response = await fetch('/createProjectChat', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' \n                },\n                body: JSON.stringify({selectedProjectId}),\n            })\n\n            const data = await response.json();\n\n            if(response.status === 201 && data){\n                setAlertTitle(\"Alert\")\n                setAlertMessage(data.message);\n                setShowAlert(true);\n            }\n            \n        } catch (error) {\n            console.log(error)\n        }\n        setShow(false);\n    }\n  \n  return (\n    <>\n        <ListGroup.Item className='selectedListItem' onClick={() => setShow(true)}>\n            <i className='far fa-comments'></i>         \n            <br></br>\n            Create Group Chat\n        </ListGroup.Item>\n\n        <Modal show={show} onHide={() => setShow(false)} >\n            <Modal.Header closeButton className='modalHeader'>\n                {projectData ?\n                    <Modal.Title>{projectData.projectTitle}</Modal.Title>\n                :\n                    <Modal.Title>Selected Project</Modal.Title>\n                }   \n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>Click on <b>Create Chat</b> button will create a group chat for this project which will \n                include all project members.</p>\n                <p>For adding or removing members please update project members in <b>Update project</b> section.</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                {projectData ?\n                    <Button className='saveBtn' id={projectData._id} onClick={handleCreateChat}>Create Chat</Button>\n                    :\n                    <Button className='saveBtn'>Ok</Button>\n                }\n            </Modal.Footer>\n        </Modal> \n\n\n\n                {/* Alert Modal */}\n\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n        </Modal>   \n    </>\n  )\n}\n\nexport default ProjectChat","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\AssignPhases.js",["373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388"],[],"C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\DeleteMember.js",["389","390","391","392","393","394","395","396","397","398","399","400"],[],"import React, {useState, useEffect, useContext} from 'react'\nimport { useNavigate, NavLink } from 'react-router-dom'\nimport '../stylesheets/messages.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col,Container, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\nimport image_S1 from '../images/abstract10.png'\n\nconst DeleteMember = () => {\n\n    const [showModal, setShowModal] = useState(false);\n    const handleClose = () => setShowModal(false);\n  return (\n    <>\n        <ListGroup.Item className='selectedListItem' onClick={() => setShowModal(true)}>\n            <i className='fa fa-trash'></i>         \n            <br></br>\n            Remove Member\n        </ListGroup.Item>\n\n        <Modal show={showModal} onHide={handleClose} backdrop=\"static\" keyboard={false} >\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title>Delete Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p className='warningTxt'>Selected member will be permanently deleted from all Projects / Tasks & Chat Box when click on <b>Remove Member</b> button.</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button variant=\"warning\" className='saveBtn' >Remove Member</Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n  )\n}\n\nexport default DeleteMember","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\UpdateNotes.js",["401","402","403","404","405","406","407","408","409","410","411","412","413"],[],"import React, {useState, useContext, useEffect} from 'react'\nimport '../stylesheets/notes.css'\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\n\n\nconst UpdateNotes = ({noteData}) => {\n\n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n    const [modalShow, setModalShow] = useState(false);\n    const [noteTitle, setNoteTitle] = useState(\"\");\n    const [noteText, setNoteText] = useState(\"\");\n    const [noteId, setNoteId] = useState(\"\");\n\n\n    const setNoteForm = () =>{\n        if(noteData){\n            setNoteTitle(noteData.currentNote.noteTitle);\n            setNoteText(noteData.currentNote.noteText);\n            setNoteId(noteData.currentNote._id);\n        }\n    }\n\n    useEffect(()=>{\n        setNoteForm();\n    },[])\n\n\n\n    const handleNoteSubmit = async (e) =>{\n        e.preventDefault();\n        if(noteTitle && noteText){\n            try {\n                const response = await fetch('/updateCurrentNote', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({noteTitle, noteText, noteId}),\n                })\n    \n                const data = await response.json();\n    \n                if(response.status === 201 && data){\n                    setAlertTitle(\"Alert\");\n                    setAlertMessage(\"Note Created\");\n                    setShowAlert(true);\n                    setNoteTitle(\"\");\n                    setNoteText(\"\");\n                    setModalShow(false);\n                    noteData.setFecthTasks(data);\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        }else{\n            setAlertTitle(\"Alert\");\n            setAlertMessage(\"Please fill the form correctly.\");\n            setShowAlert(true);\n        }\n        \n        \n    }\n\n  return (\n    <>\n        <ListGroup.Item className='selectedListBtn' onClick={() => setModalShow(true)}>\n          <i className='fa fa-edit'></i>         \n          <br></br>\n          Edit Note\n        </ListGroup.Item>\n\n        <Modal size=\"lg\" show={modalShow} onHide={() => setModalShow(false)} backdrop=\"static\" keyboard={false} aria-labelledby=\"contained-modal-title-vcenter\" centered >\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"contained-modal-title-vcenter\">Modal heading </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <Container>\n                    <Form method='POST'>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control type=\"text\" className='formInput' placeholder=\"Title\" value={noteTitle} onChange={(e)=>setNoteTitle(e.target.value)} />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Note</Form.Label>\n                            <Form.Control as=\"textarea\" className='formInput' rows={3} value={noteText} onChange={(e)=>setNoteText(e.target.value)} />\n                        </Form.Group>\n                    </Form>\n                </Container>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' variant=\"primary\" type=\"submit\" onClick={handleNoteSubmit}>Save</Button>\n            </Modal.Footer>\n        </Modal>\n\n\n\n\n         {/* Alert Modal */}\n\n         <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n        </Modal>\n\n    </>\n  )\n}\n\nexport default UpdateNotes","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\CreateNotes.js",["414","415","416","417","418","419","420","421","422","423","424","425","426"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\nimport '../stylesheets/notes.css'\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\n\n\nconst CreateNotes = ({props}) => {\n\n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n    const [modalShow, setModalShow] = useState(false);\n    const [noteTitle, setNoteTitle] = useState(\"\");\n    const [noteText, setNoteText] = useState(\"\");\n\n    const handleNoteSubmit = async (e) =>{\n        e.preventDefault();\n        if(noteTitle && noteText){\n            try {\n                const response = await fetch('/addNewnote', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({noteTitle, noteText}),\n                })\n    \n                const data = await response.json();\n    \n                if(response.status === 201 && data){\n                    setAlertTitle(\"Alert\");\n                    setAlertMessage(\"Note Created\");\n                    setShowAlert(true);\n                    setNoteTitle(\"\");\n                    setNoteText(\"\");\n                    props.setFecthTasks(data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        }else{\n            setAlertTitle(\"Alert\");\n            setAlertMessage(\"Please fill the form correctly.\");\n            setShowAlert(true);\n        }\n        \n        \n    }\n \n  return (\n    <>\n        <ListGroup.Item className='newProjectBtn' onClick={() => setModalShow(true)}>\n            <i className='fa fa-plus'></i>\n            {' '}\n            Create Note         \n        </ListGroup.Item> \n    \n        <Modal size=\"lg\" show={modalShow} onHide={() => setModalShow(false)} backdrop=\"static\" keyboard={false} aria-labelledby=\"contained-modal-title-vcenter\" centered >\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title>New Note</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <Container>\n                    <Form method='POST'>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control type=\"text\" className='formInput' placeholder=\"Title\" value={noteTitle} onChange={(e)=>setNoteTitle(e.target.value)} />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Note</Form.Label>\n                            <Form.Control as=\"textarea\" className='formInput' rows={3} value={noteText} onChange={(e)=>setNoteText(e.target.value)} />\n                        </Form.Group>\n                    </Form>\n                </Container>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' variant=\"primary\" type=\"submit\" onClick={handleNoteSubmit}>Save</Button>\n            </Modal.Footer>\n        </Modal>\n\n\n\n\n        {/* Alert Modal */}\n\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n        </Modal>\n    \n    </>\n  )\n}\n\nexport default CreateNotes","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\TodoForm.js",["427","428","429","430","431"],[],"import React, {useState, useEffect, useRef} from 'react'\nimport { useNavigate, NavLink } from 'react-router-dom'\nimport \"../stylesheets/todoForm.css\"\nimport {Container, Form, Button, Row, Col, Badge, Modal, ListGroup } from 'react-bootstrap';\n\nconst TodoForm = ({clickedTask}) => {\n    \n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n    const [smShow, setSmShow] = useState(false);\n    const [taskCat, setTaskCat] = useState([]);\n    const [taskForUpdate, setTaskForUpdate] = useState();\n    const [defaultCat, setDefaultCat] = useState([\n        {category: 'Default'},\n        {category: 'Personal'},\n        {category: 'Important'}\n    ]);\n    // let markTask = clickedTask.taskUpdate;\n  \n\n    const showCategories = async () =>{\n        try {\n            const response = await fetch('/showCategories', {\n                method: 'GET',\n            });\n    \n            const data = await response.json();\n            setTaskCat(data);\n            \n        } catch (error) {\n            console.log(error)\n        }\n        \n    }\n\n\n    useEffect(() =>{\n        showCategories();\n    },[])\n\n\n    \n\n    const handleSubmit = async (e) =>{\n        e.preventDefault();\n        const form = e.currentTarget;\n        const {task, date, category } = e.target.elements;\n\n        let details = {\n            task: task.value,\n            date: date.value,\n            category: category.value\n        }\n\n        const response = await fetch('/addNewTask', {\n            method: 'POST',\n            headers: {\n                'Content-Type' : 'application/json'\n            },\n            body: JSON.stringify(details),\n        })\n\n        let data = await response.json();\n\n        if(response.status === 400 || !data){\n            setAlertTitle(\"Alert\")\n            setAlertMessage(\"Something went wrong.\");\n            setShowAlert(true);\n        }\n        else{\n            setAlertTitle(\"Alert\")\n            setAlertMessage(\"Task added successfully.\");\n            setShowAlert(true);\n            showCategories();\n            clickedTask.setFecthTasks(data);\n        }\n        setTaskForUpdate(null); \n        form.reset();\n        \n    }\n\n    const handleUpdate = async (e) => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        const {updateTask, updateDate, updateCategory } = e.target.elements;\n\n        let details = {\n            task: updateTask.value,\n            date: updateDate.value,\n            category: updateCategory.value,\n            id: taskForUpdate._id\n        }\n\n        const response = await fetch('/updatingTask', {\n            method: 'POST',\n            headers: {\n                'Content-Type' : 'application/json'\n            },\n            body: JSON.stringify(details),\n        })\n\n        let data = await response.json();\n\n        if(response.status === 400 || !data){\n            setAlertTitle(\"Alert\")\n            setAlertMessage(\"Something went wrong.\");\n            setShowAlert(true);\n            \n        }\n        else{\n            setAlertTitle(\"Alert\")\n            setAlertMessage(\"Task updated successfully.\");\n            setShowAlert(true);\n            clickedTask.setFecthTasks(data);\n            setTaskForUpdate(null);\n        }\n        form.reset();\n    }\n\n\n    useEffect(()=>{\n        setTaskForUpdate(clickedTask.taskUpdate);\n    },[clickedTask.taskUpdate])\n\n\n\n    const addCategory = async (e) =>{\n        e.preventDefault();\n\n        const {categoryInput} = e.target.elements;\n\n        let newcategory = {\n            name: categoryInput.value\n        }\n        \n    \n        const response = await fetch('/alltaskCategories', { \n            method: 'POST',\n            headers: {\n                'Content-Type' : 'application/json' \n            },\n            body: JSON.stringify(newcategory),\n        })\n        \n        let data = await response.json();\n\n        if(response.status === 400 || !data){\n            setAlertTitle(\"Alert\")\n            setAlertMessage(\"Something went wrong.\");\n            setShowAlert(true);\n        }\n        else{\n            setAlertTitle(\"Alert\")\n            setAlertMessage(\"Category added successfully.\");\n            setShowAlert(true);\n            // window.location.reload(false);\n        }\n        categoryInput.value = \"\";\n    }\n\n\n    const deleteCat = async (e) =>{\n        let catId = e.target.id\n        console.log(catId)\n        \n        try {\n            const response = await fetch('/deletingCategory', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json'\n                },\n                body: JSON.stringify({catId}),\n            })\n    \n            let data = await response.json();\n\n            setTaskCat(data);\n    \n        } catch (error) {\n            console.log(error)\n        }\n        \n        \n    }\n\n\n\n    const handleDeleteTask = async (e) =>{\n        let taskId = e.target.id;\n        try {\n            const response = await fetch('/deletingselectedTask', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json'\n                },\n                body: JSON.stringify({taskId}),\n            })\n    \n            let data = await response.json();\n            if(response.status === 201 && data){\n                setAlertTitle(\"Alert\")\n                setAlertMessage(data.message);\n                setShowAlert(true);\n                clickedTask.setFecthTasks(data);\n                setTaskForUpdate(null);\n            }\n    \n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n\n  return (\n    <>\n        <Container className='todoFormContainer'> \n            <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\" >\n            <Modal.Header closeButton className='modalHeader'>\n            <Modal.Title id=\"example-modal-sizes-title-sm\">\n                Add New Category\n            </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBody'>\n                <Container>\n                <Row >\n                    <Col>\n                        <Form method='POST' onSubmit={addCategory}> \n                            <Form.Group className=\"mb-3 taskForm\" >\n                                <Container>\n                                    <Row className=\"justify-content-md-center\">\n                                        <Col sm lg={10} >\n                                            <Form.Control type=\"text\" id='categoryInput' className='formInput' placeholder=\"Enter Category\" />\n                                        </Col>\n                                        <Col sm lg={2}>\n                                            <Button className='categoryBtn' variant=\"primary\" type=\"submit\" >\n                                                <i className=\"fa fa-plus\"></i>\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </Container>\n                            </Form.Group>\n                            \n                        </Form>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ListGroup variant=\"flush\" >\n                            <ListGroup.Item className='todosList'>Default</ListGroup.Item>\n                            <ListGroup.Item className='todosList'>Personal</ListGroup.Item>\n                            <ListGroup.Item className='todosList'>Important</ListGroup.Item>\n                            {taskCat.map( (taskCat, index) =>\n                                <ListGroup.Item className='todosList' key={index}>{taskCat.category} <i className=\"fa fa-trash trashBtn\" id={taskCat._id} onClick={deleteCat}></i> </ListGroup.Item>\n                            )}\n                        </ListGroup>\n                    </Col>\n                </Row>\n                </Container>\n            </Modal.Body>\n            </Modal>\n\n        {taskForUpdate ?\n            <Form method='POST' onSubmit={handleUpdate} className='contactForm' >\n                <Container>\n                    <Row>\n                        <Col>\n                            <Form.Group className=\"mb-3\" >\n                                <Form.Label className='formTxt'>Update Task</Form.Label>\n                                <Form.Control type=\"text\" className='formInput' id='updateTask' defaultValue={taskForUpdate.task} placeholder=\"Enter Task\" />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Group className=\"mb-3 inputGroup\" >\n                                <Form.Label className='formTxt'>Due Date</Form.Label>\n                                <Form.Control type=\"date\" id='updateDate' className='formInput' defaultValue={taskForUpdate.date} placeholder=\"date\" />\n                            </Form.Group>\n                        </Col>\n                        <Col>\n                            <Form.Group className=\"mb-3 inputGroup\" >\n                                <Form.Label className='formTxt'>Category</Form.Label>\n                                    <Form.Select id='updateCategory' className='formInput' aria-label=\"Default select example\">  \n                                        <option className='listOption' >{taskForUpdate.category}</option> \n                                            {taskCat.map( (taskCat, index) => {\n                                                return taskCat.category !== taskForUpdate.category ?\n                                                <option className='listOption' key={index} >{taskCat.category}</option> \n                                            :\n                                                null  \n                                            })}\n\n                                            {defaultCat.map((defaultCat, index) => {\n                                                return defaultCat.category !== taskForUpdate.category ?\n                                                <option className='listOption'  key={index} >{defaultCat.category}</option> \n                                            :\n                                                null \n                                            })}                   \n                                    </Form.Select>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row >\n                        <Col >\n                            <Form.Group className=\"mb-3\" >\n                                <Form.Label className='formTxt'>Submit</Form.Label>\n                                <Button className='updateBtn' variant=\"primary\" type=\"submit\" >\n                                    <i className=\"fa fa-check\"></i> \n                                </Button>\n                            </Form.Group>\n                            {/* <Form.Group className=\"mb-3\" >\n                                <Form.Label className='formTxt'>Status</Form.Label>\n                                <Form.Select id='updateStatus' className='formInput' aria-label=\"Default select example\"> \n                                    <option className='listOption'>Pending</option>                \n                                    <option className='listOption'>Completed</option>                \n                                </Form.Select>\n                            </Form.Group> */}\n                        </Col>\n                        <Col>\n                            <Form.Group className=\"mb-3\" >\n                                <Form.Label className='formTxt'>Delete</Form.Label>\n                                <Button className='updateBtn' variant=\"primary\" id={taskForUpdate._id} onClick={handleDeleteTask} >\n                                    <i className=\"fa fa-trash\"></i> \n                                </Button>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Container>\n            </Form>\n\n            :\n\n\n            <Form method='POST' onSubmit={handleSubmit} className='contactForm' >\n                <Container>\n                    <Row className=\"justify-content-md-center\">\n                        <Col>\n                            <Form.Group className=\"mb-3\" >\n                                <Form.Label className='formTxt'>Task</Form.Label>\n                                <Form.Control type=\"text\" id='task' className='formInput' placeholder=\"Enter Task\" />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm lg=\"6\">\n                            <Form.Group className=\"mb-3 inputGroup\" >\n                                <Form.Label className='formTxt'>Due Date</Form.Label>\n                                <Form.Control type=\"date\" id='date' className='formInput' placeholder=\"date\" />\n                            </Form.Group>\n                        </Col>\n                        <Col sm lg=\"6\">\n                            <Form.Group className=\"mb-3 inputGroup\" >\n                                <Form.Label className='formTxt'>Category</Form.Label>\n                                <Button className=\"addCatBadge\" onClick={() => setSmShow(true)}><i className=\"fa fa-plus\" ></i></Button>\n                                <Form.Select id='category' className='formInput' aria-label=\"Default select example\">  \n                                    <option className='listOption'>Default</option>               \n                                    <option className='listOption'>Personal</option>               \n                                    <option className='listOption'>Important</option>               \n                                    {taskCat.map( (taskCat, index) =>\n                                        <option className='listOption' key={index}>{taskCat.category}</option>\n                                    )}\n                                </Form.Select>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm lg=\"6\">\n                            <Button className='submitBtn' variant=\"primary\" type=\"submit\" ><i className=\"fa fa-plus\"></i></Button>                \n                        </Col>\n                    </Row>\n                </Container>\n            </Form>\n            }\n        </Container>\n\n\n\n\n        {/* Alert Modal */}\n\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n            </Modal.Footer>\n        </Modal>\n    </>\n  )\n}\n\nexport default TodoForm","C:\\Users\\kedia\\OneDrive\\Desktop\\new\\variable\\frontend\\src\\components\\DeleteNote.js",["432","433","434","435","436","437","438","439","440","441","442","443","444","445","446"],[],"import React, {useState, useLayoutEffect, useEffect} from 'react'\nimport '../stylesheets/notes.css'\nimport { Row, Col, Container, Card, CardGroup, ProgressBar, Navbar, Nav, NavDropdown, Form, Image, Button, ListGroup, Offcanvas, InputGroup, Modal } from 'react-bootstrap';\n\n\n\nconst DeleteNote = ({noteData}) => {\n\n    const [showAlert, setShowAlert] = useState(false);\n    const handleAlertClose = () =>{setShowAlert(false);}\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertTitle, setAlertTitle] = useState(\"\");\n    const [noteId, setNoteId] = useState(\"\");\n\n    const setNoteForm = () =>{\n        if(noteData){\n            setAlertTitle(noteData.currentNote.noteTitle);\n            setAlertMessage('Click on \"Delete\" button will permanently delete the selected note.');\n            setNoteId(noteData.currentNote._id);\n        }\n    }\n\n    useEffect(()=>{\n        setNoteForm();\n    },[]);\n\n\n    const handleDeleteBtn = async () =>{\n\n        if(alertTitle && noteId){\n            try {\n                const response = await fetch('/deleteCurrentNote', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type' : 'application/json' \n                    },\n                    body: JSON.stringify({noteId}),\n                })\n    \n                const data = await response.json();\n    \n                if(response.status === 201 && data){\n                    setShowAlert(false);\n                    noteData.setFecthTasks(data);\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        }else{\n            setAlertTitle(\"Alert\");\n            setAlertMessage(\"Please fill the form correctly.\");\n            setShowAlert(true);\n        }\n\n    }\n\n\n  return (\n    <>\n\n    {/* Alert Modal */}\n        <ListGroup.Item className='selectedListBtn' onClick={() => setShowAlert(true)}>\n          <i className='fa fa-trash'></i>         \n          <br></br>\n          Delete Note\n        </ListGroup.Item>\n\n        <Modal size=\"sm\" show={showAlert} onHide={handleAlertClose} backdrop=\"static\" keyboard={false} aria-labelledby=\"example-modal-sizes-title-sm\">\n            <Modal.Header closeButton className='modalHeader'>\n                <Modal.Title id=\"example-modal-sizes-title-sm\">{alertTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className='modalBodyStatic'>\n                <p>{alertMessage}</p>\n            </Modal.Body>\n            <Modal.Footer className='modalFooter'>\n                {noteId ?\n                    <Button className='saveBtn' onClick={handleDeleteBtn}>Delete</Button> \n                :\n                    <Button className='saveBtn' onClick={handleAlertClose}>Ok</Button> \n                }\n            </Modal.Footer>\n        </Modal>\n    \n    </>\n  )\n}\n\nexport default DeleteNote",{"ruleId":"447","severity":1,"message":"448","line":1,"column":44,"nodeType":"449","messageId":"450","endLine":1,"endColumn":52},{"ruleId":"447","severity":1,"message":"451","line":1,"column":54,"nodeType":"449","messageId":"450","endLine":1,"endColumn":63},{"ruleId":"447","severity":1,"message":"448","line":1,"column":16,"nodeType":"449","messageId":"450","endLine":1,"endColumn":24},{"ruleId":"447","severity":1,"message":"451","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":35},{"ruleId":"447","severity":1,"message":"452","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":21},{"ruleId":"447","severity":1,"message":"453","line":2,"column":23,"nodeType":"449","messageId":"450","endLine":2,"endColumn":30},{"ruleId":"447","severity":1,"message":"454","line":5,"column":10,"nodeType":"449","messageId":"450","endLine":5,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":5,"column":15,"nodeType":"449","messageId":"450","endLine":5,"endColumn":18},{"ruleId":"447","severity":1,"message":"456","line":5,"column":30,"nodeType":"449","messageId":"450","endLine":5,"endColumn":34},{"ruleId":"447","severity":1,"message":"457","line":5,"column":36,"nodeType":"449","messageId":"450","endLine":5,"endColumn":42},{"ruleId":"447","severity":1,"message":"458","line":5,"column":44,"nodeType":"449","messageId":"450","endLine":5,"endColumn":53},{"ruleId":"447","severity":1,"message":"459","line":5,"column":55,"nodeType":"449","messageId":"450","endLine":5,"endColumn":60},{"ruleId":"447","severity":1,"message":"460","line":13,"column":19,"nodeType":"449","messageId":"450","endLine":13,"endColumn":27},{"ruleId":"447","severity":1,"message":"461","line":3,"column":10,"nodeType":"449","messageId":"450","endLine":3,"endColumn":21},{"ruleId":"447","severity":1,"message":"462","line":6,"column":31,"nodeType":"449","messageId":"450","endLine":6,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":6,"column":37,"nodeType":"449","messageId":"450","endLine":6,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":6,"column":48,"nodeType":"449","messageId":"450","endLine":6,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":6,"column":61,"nodeType":"449","messageId":"450","endLine":6,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":6,"column":69,"nodeType":"449","messageId":"450","endLine":6,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":6,"column":74,"nodeType":"449","messageId":"450","endLine":6,"endColumn":85},{"ruleId":"447","severity":1,"message":"468","line":6,"column":93,"nodeType":"449","messageId":"450","endLine":6,"endColumn":98},{"ruleId":"447","severity":1,"message":"458","line":6,"column":108,"nodeType":"449","messageId":"450","endLine":6,"endColumn":117},{"ruleId":"447","severity":1,"message":"469","line":6,"column":119,"nodeType":"449","messageId":"450","endLine":6,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":6,"column":130,"nodeType":"449","messageId":"450","endLine":6,"endColumn":140},{"ruleId":"447","severity":1,"message":"471","line":12,"column":12,"nodeType":"449","messageId":"450","endLine":12,"endColumn":17},{"ruleId":"472","severity":2,"message":"473","line":75,"column":9,"nodeType":"449","messageId":"474","endLine":75,"endColumn":15},{"ruleId":"472","severity":2,"message":"473","line":80,"column":9,"nodeType":"449","messageId":"474","endLine":80,"endColumn":15},{"ruleId":"475","severity":1,"message":"476","line":85,"column":8,"nodeType":"477","endLine":85,"endColumn":10,"suggestions":"478"},{"ruleId":"479","severity":1,"message":"480","line":140,"column":33,"nodeType":"481","messageId":"482","endLine":140,"endColumn":34,"suggestions":"483"},{"ruleId":"479","severity":1,"message":"480","line":140,"column":49,"nodeType":"481","messageId":"482","endLine":140,"endColumn":50,"suggestions":"484"},{"ruleId":"447","severity":1,"message":"448","line":1,"column":16,"nodeType":"449","messageId":"450","endLine":1,"endColumn":24},{"ruleId":"447","severity":1,"message":"485","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":41},{"ruleId":"447","severity":1,"message":"451","line":1,"column":43,"nodeType":"449","messageId":"450","endLine":1,"endColumn":52},{"ruleId":"447","severity":1,"message":"454","line":3,"column":10,"nodeType":"449","messageId":"450","endLine":3,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":3,"column":15,"nodeType":"449","messageId":"450","endLine":3,"endColumn":18},{"ruleId":"447","severity":1,"message":"467","line":3,"column":43,"nodeType":"449","messageId":"450","endLine":3,"endColumn":54},{"ruleId":"447","severity":1,"message":"486","line":3,"column":56,"nodeType":"449","messageId":"450","endLine":3,"endColumn":60},{"ruleId":"447","severity":1,"message":"468","line":3,"column":62,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"457","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":75},{"ruleId":"447","severity":1,"message":"458","line":3,"column":77,"nodeType":"449","messageId":"450","endLine":3,"endColumn":86},{"ruleId":"447","severity":1,"message":"469","line":3,"column":88,"nodeType":"449","messageId":"450","endLine":3,"endColumn":97},{"ruleId":"447","severity":1,"message":"470","line":3,"column":99,"nodeType":"449","messageId":"450","endLine":3,"endColumn":109},{"ruleId":"447","severity":1,"message":"487","line":3,"column":111,"nodeType":"449","messageId":"450","endLine":3,"endColumn":116},{"ruleId":"447","severity":1,"message":"488","line":5,"column":8,"nodeType":"449","messageId":"450","endLine":5,"endColumn":21},{"ruleId":"447","severity":1,"message":"489","line":7,"column":10,"nodeType":"449","messageId":"450","endLine":7,"endColumn":21},{"ruleId":"447","severity":1,"message":"485","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":41},{"ruleId":"447","severity":1,"message":"462","line":3,"column":31,"nodeType":"449","messageId":"450","endLine":3,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":3,"column":37,"nodeType":"449","messageId":"450","endLine":3,"endColumn":46},{"ruleId":"447","severity":1,"message":"465","line":3,"column":61,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":3,"column":74,"nodeType":"449","messageId":"450","endLine":3,"endColumn":85},{"ruleId":"447","severity":1,"message":"486","line":3,"column":87,"nodeType":"449","messageId":"450","endLine":3,"endColumn":91},{"ruleId":"447","severity":1,"message":"468","line":3,"column":93,"nodeType":"449","messageId":"450","endLine":3,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":3,"column":119,"nodeType":"449","messageId":"450","endLine":3,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":3,"column":130,"nodeType":"449","messageId":"450","endLine":3,"endColumn":140},{"ruleId":"447","severity":1,"message":"490","line":26,"column":12,"nodeType":"449","messageId":"450","endLine":26,"endColumn":28},{"ruleId":"447","severity":1,"message":"491","line":26,"column":30,"nodeType":"449","messageId":"450","endLine":26,"endColumn":49},{"ruleId":"447","severity":1,"message":"452","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":21},{"ruleId":"447","severity":1,"message":"453","line":2,"column":23,"nodeType":"449","messageId":"450","endLine":2,"endColumn":30},{"ruleId":"447","severity":1,"message":"468","line":5,"column":36,"nodeType":"449","messageId":"450","endLine":5,"endColumn":41},{"ruleId":"447","severity":1,"message":"469","line":5,"column":62,"nodeType":"449","messageId":"450","endLine":5,"endColumn":71},{"ruleId":"447","severity":1,"message":"460","line":17,"column":19,"nodeType":"449","messageId":"450","endLine":17,"endColumn":27},{"ruleId":"447","severity":1,"message":"492","line":30,"column":12,"nodeType":"449","messageId":"450","endLine":30,"endColumn":26},{"ruleId":"447","severity":1,"message":"493","line":32,"column":12,"nodeType":"449","messageId":"450","endLine":32,"endColumn":24},{"ruleId":"475","severity":1,"message":"494","line":86,"column":7,"nodeType":"477","endLine":86,"endColumn":9,"suggestions":"495"},{"ruleId":"475","severity":1,"message":"496","line":279,"column":7,"nodeType":"477","endLine":279,"endColumn":9,"suggestions":"497"},{"ruleId":"498","severity":1,"message":"499","line":304,"column":33,"nodeType":"500","endLine":310,"endColumn":35},{"ruleId":"498","severity":1,"message":"499","line":320,"column":33,"nodeType":"500","endLine":326,"endColumn":35},{"ruleId":"447","severity":1,"message":"501","line":1,"column":50,"nodeType":"449","messageId":"450","endLine":1,"endColumn":56},{"ruleId":"447","severity":1,"message":"452","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":21},{"ruleId":"447","severity":1,"message":"453","line":2,"column":23,"nodeType":"449","messageId":"450","endLine":2,"endColumn":30},{"ruleId":"447","severity":1,"message":"456","line":3,"column":30,"nodeType":"449","messageId":"450","endLine":3,"endColumn":34},{"ruleId":"447","severity":1,"message":"457","line":3,"column":36,"nodeType":"449","messageId":"450","endLine":3,"endColumn":42},{"ruleId":"447","severity":1,"message":"471","line":11,"column":12,"nodeType":"449","messageId":"450","endLine":11,"endColumn":17},{"ruleId":"447","severity":1,"message":"460","line":11,"column":19,"nodeType":"449","messageId":"450","endLine":11,"endColumn":27},{"ruleId":"447","severity":1,"message":"485","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":41},{"ruleId":"447","severity":1,"message":"462","line":3,"column":31,"nodeType":"449","messageId":"450","endLine":3,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":3,"column":37,"nodeType":"449","messageId":"450","endLine":3,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":3,"column":48,"nodeType":"449","messageId":"450","endLine":3,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":3,"column":61,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":3,"column":74,"nodeType":"449","messageId":"450","endLine":3,"endColumn":85},{"ruleId":"447","severity":1,"message":"486","line":3,"column":87,"nodeType":"449","messageId":"450","endLine":3,"endColumn":91},{"ruleId":"447","severity":1,"message":"468","line":3,"column":93,"nodeType":"449","messageId":"450","endLine":3,"endColumn":98},{"ruleId":"447","severity":1,"message":"457","line":3,"column":100,"nodeType":"449","messageId":"450","endLine":3,"endColumn":106},{"ruleId":"447","severity":1,"message":"469","line":3,"column":119,"nodeType":"449","messageId":"450","endLine":3,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":3,"column":130,"nodeType":"449","messageId":"450","endLine":3,"endColumn":140},{"ruleId":"502","severity":1,"message":"503","line":114,"column":33,"nodeType":"504","messageId":"505","endLine":114,"endColumn":35},{"ruleId":"475","severity":1,"message":"506","line":125,"column":7,"nodeType":"477","endLine":125,"endColumn":21,"suggestions":"507"},{"ruleId":"498","severity":1,"message":"499","line":214,"column":33,"nodeType":"500","endLine":217,"endColumn":35},{"ruleId":"447","severity":1,"message":"451","line":1,"column":38,"nodeType":"449","messageId":"450","endLine":1,"endColumn":47},{"ruleId":"447","severity":1,"message":"462","line":4,"column":31,"nodeType":"449","messageId":"450","endLine":4,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":4,"column":37,"nodeType":"449","messageId":"450","endLine":4,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":4,"column":48,"nodeType":"449","messageId":"450","endLine":4,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":4,"column":61,"nodeType":"449","messageId":"450","endLine":4,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":4,"column":69,"nodeType":"449","messageId":"450","endLine":4,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":4,"column":74,"nodeType":"449","messageId":"450","endLine":4,"endColumn":85},{"ruleId":"447","severity":1,"message":"486","line":4,"column":87,"nodeType":"449","messageId":"450","endLine":4,"endColumn":91},{"ruleId":"447","severity":1,"message":"468","line":4,"column":93,"nodeType":"449","messageId":"450","endLine":4,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":4,"column":119,"nodeType":"449","messageId":"450","endLine":4,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":4,"column":130,"nodeType":"449","messageId":"450","endLine":4,"endColumn":140},{"ruleId":"447","severity":1,"message":"460","line":10,"column":19,"nodeType":"449","messageId":"450","endLine":10,"endColumn":27},{"ruleId":"498","severity":1,"message":"499","line":49,"column":33,"nodeType":"500","endLine":53,"endColumn":35},{"ruleId":"447","severity":1,"message":"485","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":41},{"ruleId":"447","severity":1,"message":"454","line":3,"column":10,"nodeType":"449","messageId":"450","endLine":3,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":3,"column":15,"nodeType":"449","messageId":"450","endLine":3,"endColumn":18},{"ruleId":"447","severity":1,"message":"508","line":3,"column":19,"nodeType":"449","messageId":"450","endLine":3,"endColumn":28},{"ruleId":"447","severity":1,"message":"465","line":3,"column":30,"nodeType":"449","messageId":"450","endLine":3,"endColumn":36},{"ruleId":"447","severity":1,"message":"466","line":3,"column":38,"nodeType":"449","messageId":"450","endLine":3,"endColumn":41},{"ruleId":"447","severity":1,"message":"467","line":3,"column":43,"nodeType":"449","messageId":"450","endLine":3,"endColumn":54},{"ruleId":"447","severity":1,"message":"486","line":3,"column":56,"nodeType":"449","messageId":"450","endLine":3,"endColumn":60},{"ruleId":"447","severity":1,"message":"468","line":3,"column":62,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"457","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":75},{"ruleId":"447","severity":1,"message":"469","line":3,"column":88,"nodeType":"449","messageId":"450","endLine":3,"endColumn":97},{"ruleId":"447","severity":1,"message":"470","line":3,"column":99,"nodeType":"449","messageId":"450","endLine":3,"endColumn":109},{"ruleId":"475","severity":1,"message":"509","line":84,"column":3,"nodeType":"477","endLine":84,"endColumn":20,"suggestions":"510"},{"ruleId":"447","severity":1,"message":"511","line":1,"column":37,"nodeType":"449","messageId":"450","endLine":1,"endColumn":47},{"ruleId":"447","severity":1,"message":"453","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":17},{"ruleId":"447","severity":1,"message":"452","line":2,"column":19,"nodeType":"449","messageId":"450","endLine":2,"endColumn":30},{"ruleId":"447","severity":1,"message":"470","line":4,"column":31,"nodeType":"449","messageId":"450","endLine":4,"endColumn":41},{"ruleId":"447","severity":1,"message":"512","line":4,"column":58,"nodeType":"449","messageId":"450","endLine":4,"endColumn":69},{"ruleId":"447","severity":1,"message":"459","line":4,"column":82,"nodeType":"449","messageId":"450","endLine":4,"endColumn":87},{"ruleId":"498","severity":1,"message":"499","line":156,"column":29,"nodeType":"500","endLine":160,"endColumn":31},{"ruleId":"498","severity":1,"message":"499","line":174,"column":29,"nodeType":"500","endLine":178,"endColumn":31},{"ruleId":"447","severity":1,"message":"454","line":3,"column":10,"nodeType":"449","messageId":"450","endLine":3,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":3,"column":15,"nodeType":"449","messageId":"450","endLine":3,"endColumn":18},{"ruleId":"447","severity":1,"message":"462","line":3,"column":31,"nodeType":"449","messageId":"450","endLine":3,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":3,"column":37,"nodeType":"449","messageId":"450","endLine":3,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":3,"column":48,"nodeType":"449","messageId":"450","endLine":3,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":3,"column":61,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":3,"column":74,"nodeType":"449","messageId":"450","endLine":3,"endColumn":85},{"ruleId":"447","severity":1,"message":"486","line":3,"column":87,"nodeType":"449","messageId":"450","endLine":3,"endColumn":91},{"ruleId":"447","severity":1,"message":"468","line":3,"column":93,"nodeType":"449","messageId":"450","endLine":3,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":3,"column":119,"nodeType":"449","messageId":"450","endLine":3,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":3,"column":130,"nodeType":"449","messageId":"450","endLine":3,"endColumn":140},{"ruleId":"447","severity":1,"message":"460","line":8,"column":19,"nodeType":"449","messageId":"450","endLine":8,"endColumn":27},{"ruleId":"475","severity":1,"message":"513","line":63,"column":7,"nodeType":"477","endLine":63,"endColumn":9,"suggestions":"514"},{"ruleId":"502","severity":1,"message":"503","line":68,"column":41,"nodeType":"504","messageId":"505","endLine":68,"endColumn":43},{"ruleId":"475","severity":1,"message":"515","line":84,"column":7,"nodeType":"477","endLine":84,"endColumn":23,"suggestions":"516"},{"ruleId":"447","severity":1,"message":"452","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":21},{"ruleId":"447","severity":1,"message":"459","line":4,"column":44,"nodeType":"449","messageId":"450","endLine":4,"endColumn":49},{"ruleId":"447","severity":1,"message":"517","line":4,"column":51,"nodeType":"449","messageId":"450","endLine":4,"endColumn":64},{"ruleId":"447","severity":1,"message":"518","line":4,"column":66,"nodeType":"449","messageId":"450","endLine":4,"endColumn":73},{"ruleId":"447","severity":1,"message":"519","line":4,"column":75,"nodeType":"449","messageId":"450","endLine":4,"endColumn":83},{"ruleId":"447","severity":1,"message":"520","line":4,"column":85,"nodeType":"449","messageId":"450","endLine":4,"endColumn":96},{"ruleId":"447","severity":1,"message":"521","line":4,"column":98,"nodeType":"449","messageId":"450","endLine":4,"endColumn":112},{"ruleId":"447","severity":1,"message":"522","line":4,"column":114,"nodeType":"449","messageId":"450","endLine":4,"endColumn":128},{"ruleId":"447","severity":1,"message":"523","line":43,"column":11,"nodeType":"449","messageId":"450","endLine":43,"endColumn":23},{"ruleId":"502","severity":1,"message":"503","line":89,"column":61,"nodeType":"504","messageId":"505","endLine":89,"endColumn":63},{"ruleId":"475","severity":1,"message":"524","line":107,"column":7,"nodeType":"477","endLine":107,"endColumn":35,"suggestions":"525"},{"ruleId":"475","severity":1,"message":"526","line":142,"column":7,"nodeType":"477","endLine":142,"endColumn":17,"suggestions":"527"},{"ruleId":"502","severity":1,"message":"503","line":159,"column":65,"nodeType":"504","messageId":"505","endLine":159,"endColumn":67},{"ruleId":"502","severity":1,"message":"503","line":254,"column":36,"nodeType":"504","messageId":"505","endLine":254,"endColumn":38},{"ruleId":"502","severity":1,"message":"503","line":387,"column":49,"nodeType":"504","messageId":"505","endLine":387,"endColumn":51},{"ruleId":"498","severity":1,"message":"499","line":529,"column":41,"nodeType":"500","endLine":533,"endColumn":43},{"ruleId":"498","severity":1,"message":"499","line":611,"column":41,"nodeType":"500","endLine":615,"endColumn":43},{"ruleId":"447","severity":1,"message":"452","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":21},{"ruleId":"447","severity":1,"message":"459","line":4,"column":44,"nodeType":"449","messageId":"450","endLine":4,"endColumn":49},{"ruleId":"447","severity":1,"message":"517","line":4,"column":51,"nodeType":"449","messageId":"450","endLine":4,"endColumn":64},{"ruleId":"447","severity":1,"message":"518","line":4,"column":66,"nodeType":"449","messageId":"450","endLine":4,"endColumn":73},{"ruleId":"447","severity":1,"message":"519","line":4,"column":75,"nodeType":"449","messageId":"450","endLine":4,"endColumn":83},{"ruleId":"447","severity":1,"message":"520","line":4,"column":85,"nodeType":"449","messageId":"450","endLine":4,"endColumn":96},{"ruleId":"447","severity":1,"message":"521","line":4,"column":98,"nodeType":"449","messageId":"450","endLine":4,"endColumn":112},{"ruleId":"447","severity":1,"message":"522","line":4,"column":114,"nodeType":"449","messageId":"450","endLine":4,"endColumn":128},{"ruleId":"447","severity":1,"message":"512","line":4,"column":130,"nodeType":"449","messageId":"450","endLine":4,"endColumn":141},{"ruleId":"447","severity":1,"message":"528","line":18,"column":12,"nodeType":"449","messageId":"450","endLine":18,"endColumn":22},{"ruleId":"502","severity":1,"message":"503","line":65,"column":36,"nodeType":"504","messageId":"505","endLine":65,"endColumn":38},{"ruleId":"475","severity":1,"message":"526","line":180,"column":7,"nodeType":"477","endLine":180,"endColumn":17,"suggestions":"529"},{"ruleId":"502","severity":1,"message":"503","line":196,"column":54,"nodeType":"504","messageId":"505","endLine":196,"endColumn":56},{"ruleId":"447","severity":1,"message":"530","line":269,"column":11,"nodeType":"449","messageId":"450","endLine":269,"endColumn":22},{"ruleId":"447","severity":1,"message":"531","line":274,"column":11,"nodeType":"449","messageId":"450","endLine":274,"endColumn":25},{"ruleId":"498","severity":1,"message":"499","line":442,"column":41,"nodeType":"500","endLine":446,"endColumn":43},{"ruleId":"498","severity":1,"message":"499","line":523,"column":41,"nodeType":"500","endLine":525,"endColumn":68},{"ruleId":"447","severity":1,"message":"451","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":35},{"ruleId":"447","severity":1,"message":"452","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":21},{"ruleId":"447","severity":1,"message":"508","line":4,"column":9,"nodeType":"449","messageId":"450","endLine":4,"endColumn":18},{"ruleId":"447","severity":1,"message":"486","line":4,"column":20,"nodeType":"449","messageId":"450","endLine":4,"endColumn":24},{"ruleId":"447","severity":1,"message":"454","line":4,"column":34,"nodeType":"449","messageId":"450","endLine":4,"endColumn":37},{"ruleId":"447","severity":1,"message":"455","line":4,"column":39,"nodeType":"449","messageId":"450","endLine":4,"endColumn":42},{"ruleId":"447","severity":1,"message":"459","line":4,"column":44,"nodeType":"449","messageId":"450","endLine":4,"endColumn":49},{"ruleId":"447","severity":1,"message":"517","line":4,"column":51,"nodeType":"449","messageId":"450","endLine":4,"endColumn":64},{"ruleId":"447","severity":1,"message":"518","line":4,"column":66,"nodeType":"449","messageId":"450","endLine":4,"endColumn":73},{"ruleId":"447","severity":1,"message":"519","line":4,"column":75,"nodeType":"449","messageId":"450","endLine":4,"endColumn":83},{"ruleId":"447","severity":1,"message":"520","line":4,"column":85,"nodeType":"449","messageId":"450","endLine":4,"endColumn":96},{"ruleId":"447","severity":1,"message":"521","line":4,"column":98,"nodeType":"449","messageId":"450","endLine":4,"endColumn":112},{"ruleId":"447","severity":1,"message":"522","line":4,"column":114,"nodeType":"449","messageId":"450","endLine":4,"endColumn":128},{"ruleId":"447","severity":1,"message":"512","line":4,"column":130,"nodeType":"449","messageId":"450","endLine":4,"endColumn":141},{"ruleId":"447","severity":1,"message":"470","line":4,"column":161,"nodeType":"449","messageId":"450","endLine":4,"endColumn":171},{"ruleId":"447","severity":1,"message":"485","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":41},{"ruleId":"447","severity":1,"message":"462","line":3,"column":31,"nodeType":"449","messageId":"450","endLine":3,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":3,"column":37,"nodeType":"449","messageId":"450","endLine":3,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":3,"column":48,"nodeType":"449","messageId":"450","endLine":3,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":3,"column":61,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":3,"column":74,"nodeType":"449","messageId":"450","endLine":3,"endColumn":85},{"ruleId":"447","severity":1,"message":"486","line":3,"column":87,"nodeType":"449","messageId":"450","endLine":3,"endColumn":91},{"ruleId":"447","severity":1,"message":"468","line":3,"column":93,"nodeType":"449","messageId":"450","endLine":3,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":3,"column":119,"nodeType":"449","messageId":"450","endLine":3,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":3,"column":130,"nodeType":"449","messageId":"450","endLine":3,"endColumn":140},{"ruleId":"475","severity":1,"message":"532","line":40,"column":7,"nodeType":"477","endLine":40,"endColumn":9,"suggestions":"533"},{"ruleId":"447","severity":1,"message":"511","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":36},{"ruleId":"447","severity":1,"message":"451","line":1,"column":38,"nodeType":"449","messageId":"450","endLine":1,"endColumn":47},{"ruleId":"447","severity":1,"message":"454","line":3,"column":10,"nodeType":"449","messageId":"450","endLine":3,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":3,"column":15,"nodeType":"449","messageId":"450","endLine":3,"endColumn":18},{"ruleId":"447","severity":1,"message":"508","line":3,"column":20,"nodeType":"449","messageId":"450","endLine":3,"endColumn":29},{"ruleId":"447","severity":1,"message":"462","line":3,"column":31,"nodeType":"449","messageId":"450","endLine":3,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":3,"column":37,"nodeType":"449","messageId":"450","endLine":3,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":3,"column":48,"nodeType":"449","messageId":"450","endLine":3,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":3,"column":61,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":3,"column":74,"nodeType":"449","messageId":"450","endLine":3,"endColumn":85},{"ruleId":"447","severity":1,"message":"486","line":3,"column":87,"nodeType":"449","messageId":"450","endLine":3,"endColumn":91},{"ruleId":"447","severity":1,"message":"468","line":3,"column":93,"nodeType":"449","messageId":"450","endLine":3,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":3,"column":119,"nodeType":"449","messageId":"450","endLine":3,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":3,"column":130,"nodeType":"449","messageId":"450","endLine":3,"endColumn":140},{"ruleId":"447","severity":1,"message":"462","line":4,"column":31,"nodeType":"449","messageId":"450","endLine":4,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":4,"column":37,"nodeType":"449","messageId":"450","endLine":4,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":4,"column":48,"nodeType":"449","messageId":"450","endLine":4,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":4,"column":61,"nodeType":"449","messageId":"450","endLine":4,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":4,"column":69,"nodeType":"449","messageId":"450","endLine":4,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":4,"column":74,"nodeType":"449","messageId":"450","endLine":4,"endColumn":85},{"ruleId":"447","severity":1,"message":"486","line":4,"column":87,"nodeType":"449","messageId":"450","endLine":4,"endColumn":91},{"ruleId":"447","severity":1,"message":"468","line":4,"column":93,"nodeType":"449","messageId":"450","endLine":4,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":4,"column":119,"nodeType":"449","messageId":"450","endLine":4,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":4,"column":130,"nodeType":"449","messageId":"450","endLine":4,"endColumn":140},{"ruleId":"447","severity":1,"message":"460","line":9,"column":19,"nodeType":"449","messageId":"450","endLine":9,"endColumn":27},{"ruleId":"502","severity":1,"message":"503","line":31,"column":62,"nodeType":"504","messageId":"505","endLine":31,"endColumn":64},{"ruleId":"475","severity":1,"message":"534","line":43,"column":7,"nodeType":"477","endLine":43,"endColumn":9,"suggestions":"535"},{"ruleId":"475","severity":1,"message":"513","line":167,"column":7,"nodeType":"477","endLine":167,"endColumn":9,"suggestions":"536"},{"ruleId":"498","severity":1,"message":"499","line":328,"column":37,"nodeType":"500","endLine":331,"endColumn":39},{"ruleId":"498","severity":1,"message":"499","line":347,"column":45,"nodeType":"500","endLine":350,"endColumn":47},{"ruleId":"447","severity":1,"message":"451","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":35},{"ruleId":"447","severity":1,"message":"511","line":1,"column":37,"nodeType":"449","messageId":"450","endLine":1,"endColumn":47},{"ruleId":"447","severity":1,"message":"452","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":21},{"ruleId":"447","severity":1,"message":"453","line":2,"column":23,"nodeType":"449","messageId":"450","endLine":2,"endColumn":30},{"ruleId":"447","severity":1,"message":"454","line":5,"column":10,"nodeType":"449","messageId":"450","endLine":5,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":5,"column":15,"nodeType":"449","messageId":"450","endLine":5,"endColumn":18},{"ruleId":"447","severity":1,"message":"508","line":5,"column":19,"nodeType":"449","messageId":"450","endLine":5,"endColumn":28},{"ruleId":"447","severity":1,"message":"486","line":5,"column":30,"nodeType":"449","messageId":"450","endLine":5,"endColumn":34},{"ruleId":"447","severity":1,"message":"468","line":5,"column":36,"nodeType":"449","messageId":"450","endLine":5,"endColumn":41},{"ruleId":"447","severity":1,"message":"469","line":5,"column":62,"nodeType":"449","messageId":"450","endLine":5,"endColumn":71},{"ruleId":"447","severity":1,"message":"470","line":5,"column":73,"nodeType":"449","messageId":"450","endLine":5,"endColumn":83},{"ruleId":"447","severity":1,"message":"537","line":6,"column":8,"nodeType":"449","messageId":"450","endLine":6,"endColumn":16},{"ruleId":"447","severity":1,"message":"511","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":36},{"ruleId":"447","severity":1,"message":"454","line":3,"column":10,"nodeType":"449","messageId":"450","endLine":3,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":3,"column":15,"nodeType":"449","messageId":"450","endLine":3,"endColumn":18},{"ruleId":"447","severity":1,"message":"462","line":3,"column":31,"nodeType":"449","messageId":"450","endLine":3,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":3,"column":37,"nodeType":"449","messageId":"450","endLine":3,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":3,"column":48,"nodeType":"449","messageId":"450","endLine":3,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":3,"column":61,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":3,"column":74,"nodeType":"449","messageId":"450","endLine":3,"endColumn":85},{"ruleId":"447","severity":1,"message":"468","line":3,"column":93,"nodeType":"449","messageId":"450","endLine":3,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":3,"column":119,"nodeType":"449","messageId":"450","endLine":3,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":3,"column":130,"nodeType":"449","messageId":"450","endLine":3,"endColumn":140},{"ruleId":"475","severity":1,"message":"538","line":28,"column":7,"nodeType":"477","endLine":28,"endColumn":9,"suggestions":"539"},{"ruleId":"447","severity":1,"message":"485","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":41},{"ruleId":"447","severity":1,"message":"451","line":1,"column":43,"nodeType":"449","messageId":"450","endLine":1,"endColumn":52},{"ruleId":"447","severity":1,"message":"454","line":3,"column":10,"nodeType":"449","messageId":"450","endLine":3,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":3,"column":15,"nodeType":"449","messageId":"450","endLine":3,"endColumn":18},{"ruleId":"447","severity":1,"message":"462","line":3,"column":31,"nodeType":"449","messageId":"450","endLine":3,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":3,"column":37,"nodeType":"449","messageId":"450","endLine":3,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":3,"column":48,"nodeType":"449","messageId":"450","endLine":3,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":3,"column":61,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":3,"column":74,"nodeType":"449","messageId":"450","endLine":3,"endColumn":85},{"ruleId":"447","severity":1,"message":"468","line":3,"column":93,"nodeType":"449","messageId":"450","endLine":3,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":3,"column":119,"nodeType":"449","messageId":"450","endLine":3,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":3,"column":130,"nodeType":"449","messageId":"450","endLine":3,"endColumn":140},{"ruleId":"447","severity":1,"message":"501","line":1,"column":37,"nodeType":"449","messageId":"450","endLine":1,"endColumn":43},{"ruleId":"447","severity":1,"message":"452","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":21},{"ruleId":"447","severity":1,"message":"453","line":2,"column":23,"nodeType":"449","messageId":"450","endLine":2,"endColumn":30},{"ruleId":"447","severity":1,"message":"459","line":4,"column":44,"nodeType":"449","messageId":"450","endLine":4,"endColumn":49},{"ruleId":"447","severity":1,"message":"540","line":15,"column":24,"nodeType":"449","messageId":"450","endLine":15,"endColumn":37},{"ruleId":"447","severity":1,"message":"485","line":1,"column":26,"nodeType":"449","messageId":"450","endLine":1,"endColumn":41},{"ruleId":"447","severity":1,"message":"454","line":3,"column":10,"nodeType":"449","messageId":"450","endLine":3,"endColumn":13},{"ruleId":"447","severity":1,"message":"455","line":3,"column":15,"nodeType":"449","messageId":"450","endLine":3,"endColumn":18},{"ruleId":"447","severity":1,"message":"508","line":3,"column":20,"nodeType":"449","messageId":"450","endLine":3,"endColumn":29},{"ruleId":"447","severity":1,"message":"462","line":3,"column":31,"nodeType":"449","messageId":"450","endLine":3,"endColumn":35},{"ruleId":"447","severity":1,"message":"463","line":3,"column":37,"nodeType":"449","messageId":"450","endLine":3,"endColumn":46},{"ruleId":"447","severity":1,"message":"464","line":3,"column":48,"nodeType":"449","messageId":"450","endLine":3,"endColumn":59},{"ruleId":"447","severity":1,"message":"465","line":3,"column":61,"nodeType":"449","messageId":"450","endLine":3,"endColumn":67},{"ruleId":"447","severity":1,"message":"466","line":3,"column":69,"nodeType":"449","messageId":"450","endLine":3,"endColumn":72},{"ruleId":"447","severity":1,"message":"467","line":3,"column":74,"nodeType":"449","messageId":"450","endLine":3,"endColumn":85},{"ruleId":"447","severity":1,"message":"486","line":3,"column":87,"nodeType":"449","messageId":"450","endLine":3,"endColumn":91},{"ruleId":"447","severity":1,"message":"468","line":3,"column":93,"nodeType":"449","messageId":"450","endLine":3,"endColumn":98},{"ruleId":"447","severity":1,"message":"469","line":3,"column":119,"nodeType":"449","messageId":"450","endLine":3,"endColumn":128},{"ruleId":"447","severity":1,"message":"470","line":3,"column":130,"nodeType":"449","messageId":"450","endLine":3,"endColumn":140},{"ruleId":"475","severity":1,"message":"538","line":25,"column":7,"nodeType":"477","endLine":25,"endColumn":9,"suggestions":"541"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'NavLink' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Fade' is defined but never used.","'Button' is defined but never used.","'ListGroup' is defined but never used.","'Badge' is defined but never used.","'dispatch' is assigned a value but never used.","'GoogleLogin' is defined but never used.","'Card' is defined but never used.","'CardGroup' is defined but never used.","'ProgressBar' is defined but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","'NavDropdown' is defined but never used.","'Image' is defined but never used.","'Offcanvas' is defined but never used.","'InputGroup' is defined but never used.","'state' is assigned a value but never used.","no-undef","'google' is not defined.","undef","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleResponce'. Either include it or remove the dependency array.","ArrayExpression",["542"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["543","544"],["545","546"],"'useLayoutEffect' is defined but never used.","'Form' is defined but never used.","'Modal' is defined but never used.","'SearchMembers' is defined but never used.","'UserContext' is defined but never used.","'fecthAfterDelete' is assigned a value but never used.","'setFecthAfterDelete' is assigned a value but never used.","'userConnection' is assigned a value but never used.","'senderchatId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userProfile'. Either include it or remove the dependency array.",["547"],"React Hook useEffect has missing dependencies: 'allMessages' and 'notification'. Either include them or remove the dependency array.",["548"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'compareIds'. Either include it or remove the dependency array.",["549"],"'Container' is defined but never used.","React Hook useEffect has a missing dependency: 'createEvents'. Either include it or remove the dependency array.",["550"],"'useContext' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has a missing dependency: 'showPhases'. Either include it or remove the dependency array.",["551"],"React Hook useEffect has a missing dependency: 'handelAssigning'. Either include it or remove the dependency array.",["552"],"'FloatingLabel' is defined but never used.","'Popover' is defined but never used.","'Dropdown' is defined but never used.","'ButtonGroup' is defined but never used.","'DropdownButton' is defined but never used.","'OverlayTrigger' is defined but never used.","'handleInputs' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'forUpdatingProject'. Either include it or remove the dependency array.",["553"],"React Hook useEffect has a missing dependency: 'showSearchResult'. Either include it or remove the dependency array.",["554"],"'desigModal' is assigned a value but never used.",["555"],"'changeDesig' is assigned a value but never used.","'handleDeisgBtn' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getNotifications'. Either include it or remove the dependency array.",["556"],"React Hook useEffect has a missing dependency: 'checkMembers'. Either include it or remove the dependency array.",["557"],["558"],"'image_S1' is defined but never used.","React Hook useEffect has a missing dependency: 'setNoteForm'. Either include it or remove the dependency array.",["559"],"'setDefaultCat' is assigned a value but never used.",["560"],{"desc":"561","fix":"562"},{"messageId":"563","fix":"564","desc":"565"},{"messageId":"566","fix":"567","desc":"568"},{"messageId":"563","fix":"569","desc":"565"},{"messageId":"566","fix":"570","desc":"568"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"585","fix":"587"},{"desc":"588","fix":"589"},{"desc":"590","fix":"591"},{"desc":"579","fix":"592"},{"desc":"593","fix":"594"},{"desc":"593","fix":"595"},"Update the dependencies array to be: [handleResponce]",{"range":"596","text":"597"},"removeEscape",{"range":"598","text":"599"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"600","text":"601"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"602","text":"599"},{"range":"603","text":"601"},"Update the dependencies array to be: [userProfile]",{"range":"604","text":"605"},"Update the dependencies array to be: [allMessages, notification]",{"range":"606","text":"607"},"Update the dependencies array to be: [compareIds, searchResult]",{"range":"608","text":"609"},"Update the dependencies array to be: [tasks, projects, createEvents]",{"range":"610","text":"611"},"Update the dependencies array to be: [showPhases]",{"range":"612","text":"613"},"Update the dependencies array to be: [assignedPhases, handelAssigning]",{"range":"614","text":"615"},"Update the dependencies array to be: [forUpdatingProject, projectData.currentProject]",{"range":"616","text":"617"},"Update the dependencies array to be: [showSearchResult, txtInput]",{"range":"618","text":"619"},{"range":"620","text":"619"},"Update the dependencies array to be: [getNotifications]",{"range":"621","text":"622"},"Update the dependencies array to be: [checkMembers]",{"range":"623","text":"624"},{"range":"625","text":"613"},"Update the dependencies array to be: [setNoteForm]",{"range":"626","text":"627"},{"range":"628","text":"627"},[2984,2986],"[handleResponce]",[4474,4475],"",[4474,4474],"\\",[4490,4491],[4490,4490],[2762,2764],"[userProfile]",[8090,8092],"[allMessages, notification]",[3561,3575],"[compareIds, searchResult]",[1857,1874],"[tasks, projects, createEvents]",[2389,2391],"[showPhases]",[2829,2845],"[assignedPhases, handelAssigning]",[3594,3622],"[forUpdatingProject, projectData.currentProject]",[4218,4228],"[showSearchResult, txtInput]",[5772,5782],[1425,1427],"[getNotifications]",[1938,1940],"[checkMembers]",[5916,5918],[1020,1022],"[setNoteForm]",[912,914]]